"""Teachers API endpoints."""

from datetime import datetime
from typing import List, Optional
import io
import pandas as pd

from fastapi import APIRouter, HTTPException, status, File, UploadFile, Query
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from sqlalchemy import select, delete, update
from sqlalchemy.orm import selectinload

from app.api.dependencies import AdminUser, DbSession
from app.models import Teacher, Schedule, ConductedLesson, LessonEvent, PayRate, Payroll, BotSchedule

router = APIRouter(prefix="/teachers", tags=["teachers"])


class TeacherCreate(BaseModel):
    """Teacher creation model."""

    full_name: str
    tg_username: Optional[str] = None
    tg_chat_id: Optional[int] = None
    active: bool = True


class TeacherUpdate(BaseModel):
    """Teacher update model."""

    full_name: Optional[str] = None
    tg_username: Optional[str] = None
    tg_chat_id: Optional[int] = None
    active: Optional[bool] = None


class TeacherResponse(BaseModel):
    """Teacher response model."""

    id: int
    full_name: str
    tg_chat_id: Optional[int]
    tg_username: Optional[str]
    active: bool
    created_at: datetime

    class Config:
        from_attributes = True


@router.get("/", response_model=List[TeacherResponse])
async def get_teachers(
    db: DbSession,
    # admin: AdminUser,  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
    skip: int = 0,
    limit: int = 100,
    include_inactive: bool = False,
) -> List[Teacher]:
    """Get all teachers (by default only active)."""
    query = select(Teacher).options(selectinload(Teacher.schedules))
    
    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø–æ–∫–∞–∑—É—î–º–æ —Ç—ñ–ª—å–∫–∏ –∞–∫—Ç–∏–≤–Ω–∏—Ö –≤—á–∏—Ç–µ–ª—ñ–≤
    if not include_inactive:
        query = query.where(Teacher.active == True)
        
    result = await db.execute(query.offset(skip).limit(limit))
    return result.scalars().all()


@router.post("/", response_model=TeacherResponse, status_code=status.HTTP_201_CREATED)
async def create_teacher(
    teacher_data: TeacherCreate,
    db: DbSession,
    admin: AdminUser,
) -> Teacher:
    """Create new teacher with automatic default pay rate."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—á–∏—Ç–µ–ª—è
    teacher = Teacher(**teacher_data.model_dump())
    db.add(teacher)
    await db.commit()
    await db.refresh(teacher)
    
    # üí∞ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û –°–¢–í–û–†–Æ–Ñ–ú–û –ë–ê–ó–û–í–ò–ô –¢–ê–†–ò–§ 200‚Ç¥ –ó–ê –£–†–û–ö
    from app.models.pay_rate import PayRate, PayRateType
    from decimal import Decimal
    from datetime import date
    import logging
    
    logger = logging.getLogger(__name__)
    
    default_pay_rate = PayRate(
        teacher_id=teacher.id,
        rate_type=PayRateType.PER_LESSON,
        amount_decimal=Decimal("200.00"),
        active_from=date.today(),
        active_to=None  # –ë–µ–∑—Å—Ç—Ä–æ–∫–æ–≤–∏–π
    )
    
    db.add(default_pay_rate)
    await db.commit()
    
    logger.info(f"üí∞ Created default pay rate 200‚Ç¥ per lesson for teacher {teacher.full_name} (ID: {teacher.id})")
    
    # üìù AUDIT LOG: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è
    try:
        from app.services.audit_service import log_audit
        await log_audit(
            db=db,
            action_type="CREATE",
            entity_type="teacher",
            entity_id=teacher.id,
            entity_name=teacher.full_name,
            description=f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ –≤—á–∏—Ç–µ–ª—è: {teacher.full_name}, Telegram: @{teacher.tg_username or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –±–∞–∑–æ–≤–∏–π —Ç–∞—Ä–∏—Ñ 200‚Ç¥ –∑–∞ —É—Ä–æ–∫.",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"after": {
                "full_name": teacher.full_name,
                "tg_username": teacher.tg_username,
                "tg_chat_id": teacher.tg_chat_id,
                "active": teacher.active,
                "default_pay_rate": "200‚Ç¥ –∑–∞ —É—Ä–æ–∫"
            }}
        )
    except Exception as e:
        logger.error(f"‚ùå AUDIT LOG ERROR (teacher CREATE): {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    return teacher


# === EXCEL IMPORT FOR TEACHERS ===

class ImportTeachersResponse(BaseModel):
    """Response model for teachers import."""
    
    created_count: int
    skipped_count: int
    errors: List[str]


@router.post("/import", response_model=ImportTeachersResponse)
async def import_teachers(
    db: DbSession,
    file: UploadFile = File(...),
    skip_duplicates: bool = True,
    # admin: AdminUser,  # –ü–æ–∫–∏ —â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> ImportTeachersResponse:
    """Import teachers from Excel file."""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="File must be Excel format (.xlsx or .xls)"
        )
    
    try:
        # –ß–∏—Ç–∞—î–º–æ Excel —Ñ–∞–π–ª
        contents = await file.read()
        df = pd.read_excel(io.BytesIO(contents), sheet_name='–í—á–∏—Ç–µ–ª—ñ')
        
        created_count = 0
        skipped_count = 0
        errors = []
        
        # –ú–∞–ø—ñ–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ –¥–ª—è –≤—á–∏—Ç–µ–ª—ñ–≤
        column_mapping = {
            "–ü–æ–≤–Ω–µ —ñ–º'—è *": "full_name",
            "Telegram Username": "tg_username", 
            "Telegram Chat ID": "tg_chat_id",
            "–ê–∫—Ç–∏–≤–Ω–∏–π (—Ç–∞–∫/–Ω—ñ)": "active"
        }
        
        for index, row in df.iterrows():
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
                if pd.isna(row.get("–ü–æ–≤–Ω–µ —ñ–º'—è *")):
                    errors.append(f"–†—è–¥–æ–∫ {index + 2}: –ü–æ–≤–Ω–µ —ñ–º'—è —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º")
                    continue
                
                full_name = str(row["–ü–æ–≤–Ω–µ —ñ–º'—è *"]).strip()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
                if skip_duplicates:
                    result = await db.execute(
                        select(Teacher).where(
                            Teacher.full_name == full_name
                        )
                    )
                    existing = result.scalar_one_or_none()
                    if existing:
                        skipped_count += 1
                        continue
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –≤—á–∏—Ç–µ–ª—è
                teacher_data = {
                    "full_name": full_name
                }
                
                # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ–ª—è
                for excel_col, db_field in column_mapping.items():
                    if excel_col == "–ü–æ–≤–Ω–µ —ñ–º'—è *":
                        continue
                        
                    value = row.get(excel_col)
                    if not pd.isna(value):
                        if db_field == "tg_chat_id":
                            # –û–±—Ä–æ–±–ª—è—î–º–æ Chat ID —è–∫ —á–∏—Å–ª–æ
                            try:
                                teacher_data[db_field] = int(value) if value else None
                            except (ValueError, TypeError):
                                errors.append(f"–†—è–¥–æ–∫ {index + 2}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç Chat ID")
                                continue
                        elif db_field == "active":
                            # –û–±—Ä–æ–±–ª—è—î–º–æ –±—É–ª–µ–≤–µ –ø–æ–ª–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—ñ
                            if isinstance(value, str):
                                value_lower = value.lower().strip()
                                teacher_data[db_field] = value_lower in ["—Ç–∞–∫", "yes", "true", "1", "+"]
                            else:
                                teacher_data[db_field] = bool(value)
                        elif db_field == "tg_username":
                            # –û–±—Ä–æ–±–ª—è—î–º–æ username (–ø—Ä–∏–±–∏—Ä–∞—î–º–æ @ —è–∫—â–æ —î)
                            username = str(value).strip()
                            if username.startswith('@'):
                                username = username[1:]
                            teacher_data[db_field] = username if username else None
                        else:
                            teacher_data[db_field] = str(value).strip() if str(value).strip() else None
                
                # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                if "active" not in teacher_data:
                    teacher_data["active"] = True
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –≤—á–∏—Ç–µ–ª—è
                teacher = Teacher(**teacher_data)
                db.add(teacher)
                created_count += 1
                
            except Exception as e:
                errors.append(f"–†—è–¥–æ–∫ {index + 2}: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ - {str(e)}")
                continue
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        await db.commit()
        
        return ImportTeachersResponse(
            created_count=created_count,
            skipped_count=skipped_count,
            errors=errors
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error processing Excel file: {str(e)}"
        )


@router.get("/template")
async def download_teachers_template():
    """Download Excel template for teachers import."""
    try:
        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame –∑ —à–∞–±–ª–æ–Ω–æ–º
        template_data = {
            "–ü–æ–≤–Ω–µ —ñ–º'—è *": [
                "–Ü–≤–∞–Ω –ü–µ—Ç—Ä–µ–Ω–∫–æ",
                "–ú–∞—Ä—ñ—è –ö–æ–≤–∞–ª–µ–Ω–∫–æ", 
                "–û–ª–µ–∫—Å–∞–Ω–¥—Ä –®–µ–≤—á–µ–Ω–∫–æ"
            ],
            "Telegram Username": [
                "ivan_teacher",
                "maria_teacher",
                "alex_teacher"  
            ],
            "Telegram Chat ID": [
                "123456789",
                "987654321",
                "555666777"
            ],
            "–ê–∫—Ç–∏–≤–Ω–∏–π (—Ç–∞–∫/–Ω—ñ)": [
                "—Ç–∞–∫",
                "—Ç–∞–∫", 
                "–Ω—ñ"
            ]
        }
        
        df = pd.DataFrame(template_data)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
        excel_buffer = io.BytesIO()
        with pd.ExcelWriter(excel_buffer, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–í—á–∏—Ç–µ–ª—ñ', index=False)
        
        excel_buffer.seek(0)
        
        from fastapi.responses import StreamingResponse
        
        return StreamingResponse(
            io.BytesIO(excel_buffer.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": "attachment; filename=teachers_template.xlsx"}
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error creating template: {str(e)}"
        )


# === CRUD OPERATIONS ===

@router.get("/{teacher_id}", response_model=TeacherResponse)
async def get_teacher(
    teacher_id: int,
    db: DbSession,
    admin: AdminUser,
) -> Teacher:
    """Get teacher by ID."""
    result = await db.execute(
        select(Teacher)
        .options(selectinload(Teacher.schedules))
        .where(Teacher.id == teacher_id)
    )
    teacher = result.scalar_one_or_none()
    if not teacher:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Teacher not found"
        )
    return teacher


@router.put("/{teacher_id}", response_model=TeacherResponse)
async def update_teacher(
    teacher_id: int,
    teacher_data: TeacherUpdate,
    db: DbSession,
    admin: AdminUser,
) -> Teacher:
    """Update teacher."""
    result = await db.execute(select(Teacher).where(Teacher.id == teacher_id))
    teacher = result.scalar_one_or_none()
    if not teacher:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Teacher not found"
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∞—É–¥–∏—Ç—É
    old_values = {}
    update_data = teacher_data.model_dump(exclude_unset=True)
    for field in update_data.keys():
        old_values[field] = getattr(teacher, field, None)
    
    # Update fields
    for field, value in update_data.items():
        setattr(teacher, field, value)
    
    await db.commit()
    await db.refresh(teacher)
    
    # üìù AUDIT LOG: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≤—á–∏—Ç–µ–ª—è
    try:
        from app.services.audit_service import log_audit
        changes_desc = ", ".join([f"{k}: {old_values.get(k)} ‚Üí {v}" for k, v in update_data.items() if old_values.get(k) != v])
        await log_audit(
            db=db,
            action_type="UPDATE",
            entity_type="teacher",
            entity_id=teacher.id,
            entity_name=teacher.full_name,
            description=f"–û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ –≤—á–∏—Ç–µ–ª—è: {teacher.full_name}. –ó–º—ñ–Ω–∏: {changes_desc}",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"before": old_values, "after": update_data}
        )
    except Exception as e:
        pass
    
    return teacher


@router.post("/{teacher_id}/deactivate", response_model=dict)
async def deactivate_teacher(
    teacher_id: int,
    db: DbSession,
) -> dict:
    """Deactivate teacher (soft delete) - –ø—Ä–æ—Å—Ç—ñ—à–∏–π –ø—ñ–¥—Ö—ñ–¥."""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≤—á–∏—Ç–µ–ª—å
    result = await db.execute(select(Teacher).where(Teacher.id == teacher_id))
    teacher = result.scalar_one_or_none()
    if not teacher:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Teacher not found"
        )
    
    if not teacher.active:
        return {"message": f"–í—á–∏—Ç–µ–ª—å '{teacher.full_name}' –≤–∂–µ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π", "success": True}
    
    try:
        # –ü—Ä–æ—Å—Ç–æ –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤—á–∏—Ç–µ–ª—è
        teacher.active = False
        
        # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤—Å—ñ –π–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥–∏
        await db.execute(
            update(Schedule)
            .where(Schedule.teacher_id == teacher_id)
            .values(active=False)
        )
        
        await db.commit()
        
        # üìù AUDIT LOG: –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—á–∏—Ç–µ–ª—è
        try:
            from app.services.audit_service import log_audit
            await log_audit(
                db=db,
                action_type="UPDATE",
                entity_type="teacher",
                entity_id=teacher.id,
                entity_name=teacher.full_name,
                description=f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤—á–∏—Ç–µ–ª—è: {teacher.full_name}",
                user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                changes={"active": {"before": True, "after": False}}
            )
        except Exception as e:
            pass
        
        return {"message": f"–í—á–∏—Ç–µ–ª—å '{teacher.full_name}' —É—Å–ø—ñ—à–Ω–æ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–∏–π", "success": True}
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error deactivating teacher: {str(e)}"
        )

@router.delete("/{teacher_id}", status_code=status.HTTP_200_OK)
async def delete_teacher(
    teacher_id: int,
    db: DbSession,
    force: bool = Query(False, description="Force delete with all dependencies"),
    # admin: AdminUser,  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> dict:
    """Delete teacher with smart cascade handling."""
    print(f"üéØ DELETE TEACHER CALLED: id={teacher_id}, force={force}")
    from app.models import LessonEvent, Payroll, ConductedLesson, PayRate
    from sqlalchemy import func
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≤—á–∏—Ç–µ–ª—å
    result = await db.execute(select(Teacher).where(Teacher.id == teacher_id))
    teacher = result.scalar_one_or_none()
    if not teacher:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Teacher not found"
        )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ
    schedules_count = await db.execute(
        select(func.count(Schedule.id)).where(Schedule.teacher_id == teacher_id)
    )
    schedules_count = schedules_count.scalar() or 0
    
    lesson_events_count = await db.execute(
        select(func.count(LessonEvent.id)).where(LessonEvent.teacher_id == teacher_id)
    )
    lesson_events_count = lesson_events_count.scalar() or 0
    
    payroll_count = await db.execute(
        select(func.count(Payroll.id)).where(Payroll.teacher_id == teacher_id)
    )
    payroll_count = payroll_count.scalar() or 0
    
    conducted_count = await db.execute(
        select(func.count(ConductedLesson.id)).where(ConductedLesson.teacher_id == teacher_id)
    )
    conducted_count = conducted_count.scalar() or 0
    
    # ‚ùóÔ∏è –í–ê–ñ–õ–ò–í–û: –î–æ–¥–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É PayRate (—Ä–∞–Ω—ñ—à–µ –≤—ñ–¥—Å—É—Ç–Ω—è!)
    pay_rates_count = await db.execute(
        select(func.count(PayRate.id)).where(PayRate.teacher_id == teacher_id)
    )
    pay_rates_count = pay_rates_count.scalar() or 0
    
    has_dependencies = (schedules_count > 0 or lesson_events_count > 0 or payroll_count > 0 or 
                       conducted_count > 0 or pay_rates_count > 0)
    
    # –ù–û–í–ê –õ–û–ì–Ü–ö–ê: –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ, –∑ force - –≤–∏–¥–∞–ª—è—î–º–æ
    if has_dependencies and not force:
        # –ë–µ–∑–ø–µ—á–Ω–∞ –¥–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –ø—Ä–∏ –Ω–∞—è–≤–Ω–æ—Å—Ç—ñ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π
        teacher.active = False
        
        # –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ –≤—Å—ñ –π–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥–∏
        await db.execute(
            update(Schedule)
            .where(Schedule.teacher_id == teacher_id)
            .values(active=False)
        )
        
        # üìù AUDIT LOG: –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è –≤—á–∏—Ç–µ–ª—è (—á–µ—Ä–µ–∑ DELETE –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏)
        try:
            from app.services.audit_service import log_audit
            await log_audit(
                db=db,
                action_type="UPDATE",
                entity_type="teacher",
                entity_id=teacher.id,
                entity_name=teacher.full_name,
                description=f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ –≤—á–∏—Ç–µ–ª—è: {teacher.full_name} (—á–µ—Ä–µ–∑ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—è–º–∏)",
                user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                changes={"active": {"before": True, "after": False}, "reason": "delete_with_dependencies"}
            )
        except Exception as e:
            pass
        
        await db.commit()
        
        return {
            "success": True,
            "action": "deactivated",
            "message": f"–í—á–∏—Ç–µ–ª—å '{teacher.full_name}' –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —á–µ—Ä–µ–∑ –Ω–∞—è–≤–Ω—ñ—Å—Ç—å –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π",
            "teacher": teacher.full_name,
            "dependencies": {
                "schedules": schedules_count,
                "lesson_events": lesson_events_count,
                "payroll_records": payroll_count,
                "conducted_lessons": conducted_count,
                "pay_rates": pay_rates_count
            },
            "note": "–î–ª—è –ø–æ–≤–Ω–æ–≥–æ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π—Ç–µ force=true"
        }
    
    try:
        if force and has_dependencies:
            # üî• –ö–ê–°–ö–ê–î–ù–ï –í–ò–î–ê–õ–ï–ù–ù–Ø –ó –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø–ú
            print(f"üö® FORCE DELETE teacher {teacher_id}: {teacher.full_name}")
            print(f"üìä Dependencies: schedules={schedules_count}, events={lesson_events_count}, payroll={payroll_count}, pay_rates={pay_rates_count}, conducted={conducted_count}")
            
            # 1. –í–∏–¥–∞–ª—è—î–º–æ bot schedules
            await db.execute(
                delete(BotSchedule).where(BotSchedule.schedule_id.in_(
                    select(Schedule.id).where(Schedule.teacher_id == teacher_id)
                ))
            )
            
            # 2. –í–∏–¥–∞–ª—è—î–º–æ payroll –∑–∞–ø–∏—Å–∏
            await db.execute(
                delete(Payroll).where(Payroll.teacher_id == teacher_id)
            )
            
            # 3. –í–∏–¥–∞–ª—è—î–º–æ pay rates
            await db.execute(
                delete(PayRate).where(PayRate.teacher_id == teacher_id)
            )
            
            # 4. –í–∏–¥–∞–ª—è—î–º–æ conducted lessons
            await db.execute(
                delete(ConductedLesson).where(ConductedLesson.teacher_id == teacher_id)
            )
            
            # 5. –í–∏–¥–∞–ª—è—î–º–æ lesson events (—Ü–µ —Ç–∞–∫–æ–∂ –≤–∏–¥–∞–ª–∏—Ç—å attendance —á–µ—Ä–µ–∑ CASCADE)
            await db.execute(
                delete(LessonEvent).where(LessonEvent.teacher_id == teacher_id)
            )
            
            # 6. –í–∏–¥–∞–ª—è—î–º–æ schedules
            await db.execute(
                delete(Schedule).where(Schedule.teacher_id == teacher_id)
            )
            
            # 7. –í–∏–¥–∞–ª—è—î–º–æ –≤—á–∏—Ç–µ–ª—è (—á–µ—Ä–µ–∑ SQL, –Ω–µ ORM —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ cascade –∫–æ–Ω—Ñ–ª—ñ–∫—Ç—ñ–≤)
            teacher_name = teacher.full_name  # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
            await db.execute(
                delete(Teacher).where(Teacher.id == teacher_id)
            )
            
            # üìù AUDIT LOG: FORCE DELETE –≤—á–∏—Ç–µ–ª—è
            try:
                from app.services.audit_service import log_audit
                await log_audit(
                    db=db,
                    action_type="DELETE",
                    entity_type="teacher",
                    entity_id=teacher_id,
                    entity_name=teacher_name,
                    description=f"–ü–û–í–ù–ï –í–ò–î–ê–õ–ï–ù–ù–Ø –≤—á–∏—Ç–µ–ª—è: {teacher_name} (force=true, –∫–∞—Å–∫–∞–¥–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ {schedules_count + lesson_events_count + payroll_count + conducted_count + pay_rates_count} –∑–∞–ø–∏—Å—ñ–≤)",
                    user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                    changes={"deleted": {
                        "teacher": teacher_name,
                        "schedules": schedules_count,
                        "lesson_events": lesson_events_count,
                        "payroll": payroll_count,
                        "conducted_lessons": conducted_count,
                        "pay_rates": pay_rates_count
                    }}
                )
            except Exception as e:
                pass
            
            await db.commit()
            
            return {
                "success": True,
                "message": f"–í—á–∏—Ç–µ–ª—å '{teacher_name}' —Ç–∞ –≤—Å—ñ –ø–æ–≤'—è–∑–∞–Ω—ñ –¥–∞–Ω—ñ –≤–∏–¥–∞–ª–µ–Ω–æ",
                "deleted": {
                    "teacher": teacher_name,
                    "schedules": schedules_count,
                    "lesson_events": lesson_events_count,
                    "payroll_records": payroll_count,
                    "conducted_lessons": conducted_count,
                    "pay_rates": pay_rates_count
                }
            }
        else:
            # –ü—Ä–æ—Å—Çe –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–±–µ–∑ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç–µ–π, —á–µ—Ä–µ–∑ SQL)
            await db.execute(
                delete(Teacher).where(Teacher.id == teacher_id)
            )
            await db.commit()
            
            return {
                "success": True,
                "message": f"–í—á–∏—Ç–µ–ª—å '{teacher.full_name}' —É—Å–ø—ñ—à–Ω–æ –≤–∏–¥–∞–ª–µ–Ω–æ",
                "deleted": {
                    "teacher": teacher.full_name
                }
            }
            
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error deleting teacher: {str(e)}"
        )


@router.post("/{teacher_id}/toggle-active", response_model=dict)
async def toggle_teacher_active(
    teacher_id: int,
    db: DbSession,
) -> dict:
    """Toggle teacher active status."""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≤—á–∏—Ç–µ–ª—å
    result = await db.execute(select(Teacher).where(Teacher.id == teacher_id))
    teacher = result.scalar_one_or_none()
    if not teacher:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Teacher not found"
        )
    
    try:
        # –ó–º—ñ–Ω—é—î–º–æ —Å—Ç–∞—Ç—É—Å
        new_status = not teacher.active
        teacher.active = new_status
        
        # –Ø–∫—â–æ –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ - –¥–µ–∞–∫—Ç–∏–≤—É—î–º–æ —Ç–∞–∫–æ–∂ —Ä–æ–∑–∫–ª–∞–¥–∏
        if not new_status:
            await db.execute(
                update(Schedule)
                .where(Schedule.teacher_id == teacher_id)
                .values(active=False)
            )
        
        await db.commit()
        
        action = "–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ" if new_status else "–¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ"
        
        return {
            "success": True,
            "message": f"–í—á–∏—Ç–µ–ª—å '{teacher.full_name}' {action}",
            "teacher": {
                "id": teacher.id,
                "full_name": teacher.full_name,
                "active": new_status
            }
        }
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error toggling teacher status: {str(e)}"
        )


@router.get("/export/excel")
async def export_teachers_excel(
    db: DbSession,
    # admin: AdminUser,  # –ü–æ–∫–∏ —â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> StreamingResponse:
    """Export all teachers data to Excel."""
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö –≤—á–∏—Ç–µ–ª—ñ–≤ –∑ –ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        result = await db.execute(
            select(Teacher)
            .options(
                selectinload(Teacher.schedules).selectinload(Schedule.club),
                selectinload(Teacher.conducted_lessons).selectinload(ConductedLesson.club)
            )
            .order_by(Teacher.full_name)
        )
        teachers = result.scalars().all()
        
        if not teachers:
            raise HTTPException(status_code=404, detail="No teachers found")
        
        # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è Excel
        teachers_data = []
        for teacher in teachers:
            # –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_lessons = len(teacher.conducted_lessons)
            total_present = sum(lesson.present_students for lesson in teacher.conducted_lessons)
            active_clubs = len(set(schedule.club.name for schedule in teacher.schedules if schedule.active))
            
            teachers_data.append({
                # === –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–ü–æ–≤–Ω–µ —ñ–º'—è": teacher.full_name,
                "–ê–∫—Ç–∏–≤–Ω–∏–π": "–¢–∞–∫" if teacher.active else "–ù—ñ",
                
                # === TELEGRAM ===
                "Telegram Username": f"@{teacher.tg_username}" if teacher.tg_username else "‚Äî",
                "Telegram Chat ID": teacher.tg_chat_id or "‚Äî",
                
                # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–û–ë–û–¢–ò ===
                "–ê–∫—Ç–∏–≤–Ω–∏—Ö –≥—É—Ä—Ç–∫—ñ–≤": active_clubs,
                "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Ä–æ–∫—ñ–≤": total_lessons,
                "–í—Å—å–æ–≥–æ —É—á–Ω—ñ–≤ –Ω–∞–≤—á–µ–Ω–æ": total_present,
                "–°–µ—Ä–µ–¥–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å": f"{total_present / total_lessons:.1f}" if total_lessons > 0 else "0",
                
                # === –°–ò–°–¢–ï–ú–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó": teacher.created_at.strftime("%d.%m.%Y %H:%M") if teacher.created_at else "‚Äî"
            })
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
        df = pd.DataFrame(teachers_data)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–í—á–∏—Ç–µ–ª—ñ', index=False)
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–í—á–∏—Ç–µ–ª—ñ']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            summary_data = {
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': [
                    '–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≤—á–∏—Ç–µ–ª—ñ–≤',
                    '–ê–∫—Ç–∏–≤–Ω–∏—Ö –≤—á–∏—Ç–µ–ª—ñ–≤',
                    '–í—á–∏—Ç–µ–ª—ñ–≤ –∑ Telegram',
                    '–ó–∞–≥–∞–ª–æ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–æ —É—Ä–æ–∫—ñ–≤',
                    '–ó–∞–≥–∞–ª–æ–º –Ω–∞–≤—á–µ–Ω–æ —É—á–Ω—ñ–≤'
                ],
                '–ó–Ω–∞—á–µ–Ω–Ω—è': [
                    len(teachers),
                    len([t for t in teachers if t.active]),
                    len([t for t in teachers if t.tg_username]),
                    sum(len(t.conducted_lessons) for t in teachers),
                    sum(sum(lesson.present_students for lesson in t.conducted_lessons) for t in teachers)
                ]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        output.seek(0)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
        today = datetime.now().strftime('%Y-%m-%d')
        filename = f"teachers_export_{today}.xlsx"
        
        return StreamingResponse(
            io.BytesIO(output.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error exporting teachers: {str(e)}"
        )
