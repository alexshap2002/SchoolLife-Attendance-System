"""Clubs API endpoints."""

from datetime import datetime
from typing import List, Optional
import io
import pandas as pd
import logging

from fastapi import APIRouter, HTTPException, status
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from sqlalchemy import select, delete, update
from sqlalchemy.orm import selectinload

from app.api.dependencies import AdminUser, DbSession
from app.models import Club, Enrollment, Schedule, ConductedLesson

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/clubs", tags=["clubs"])


class ClubCreate(BaseModel):
    """Club creation model."""

    name: str
    duration_min: int = 60
    location: str


class ClubUpdate(BaseModel):
    """Club update model."""

    name: Optional[str] = None
    duration_min: Optional[int] = None
    location: Optional[str] = None


class ClubResponse(BaseModel):
    """Club response model."""

    id: int
    name: str
    duration_min: int
    location: str
    created_at: datetime

    class Config:
        from_attributes = True


@router.get("/", response_model=List[ClubResponse])
async def get_clubs(
    db: DbSession,
    admin: AdminUser,
    skip: int = 0,
    limit: int = 100,
) -> List[Club]:
    """Get all clubs."""
    result = await db.execute(
        select(Club)
        .options(selectinload(Club.schedules))
        .offset(skip)
        .limit(limit)
    )
    return result.scalars().all()


@router.get("/{club_id}", response_model=ClubResponse)
async def get_club(
    club_id: int,
    db: DbSession,
    admin: AdminUser,
) -> Club:
    """Get club by ID."""
    result = await db.execute(
        select(Club)
        .options(selectinload(Club.schedules))
        .where(Club.id == club_id)
    )
    club = result.scalar_one_or_none()
    if not club:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Club not found"
        )
    return club


@router.post("/", response_model=ClubResponse, status_code=status.HTTP_201_CREATED)
async def create_club(
    club_data: ClubCreate,
    db: DbSession,
    admin: AdminUser,
) -> Club:
    """Create new club."""
    club = Club(**club_data.model_dump())
    db.add(club)
    await db.flush()  # Flush —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ ID
    
    # üìù AUDIT LOG: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –≥—É—Ä—Ç–∫–∞ (–ü–ï–†–ï–î commit!)
    try:
        from app.services.audit_service import log_audit
        await log_audit(
            db=db,
            action_type="CREATE",
            entity_type="club",
            entity_id=club.id,
            entity_name=club.name,
            description=f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π –≥—É—Ä—Ç–æ–∫: {club.name}",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"after": {"name": club.name, "description": club.description}}
        )
    except Exception as e:
        logger.error(f"‚ùå AUDIT LOG ERROR (club CREATE): {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    await db.commit()
    await db.refresh(club)
    return club


@router.put("/{club_id}", response_model=ClubResponse)
async def update_club(
    club_id: int,
    club_data: ClubUpdate,
    db: DbSession,
    admin: AdminUser,
) -> Club:
    """Update club."""
    result = await db.execute(select(Club).where(Club.id == club_id))
    club = result.scalar_one_or_none()
    if not club:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Club not found"
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∞—É–¥–∏—Ç—É
    old_values = {}
    update_data = club_data.model_dump(exclude_unset=True)
    for field in update_data.keys():
        old_values[field] = getattr(club, field, None)
    
    # Update fields
    for field, value in update_data.items():
        setattr(club, field, value)
    
    # üìù AUDIT LOG: –û–Ω–æ–≤–ª–µ–Ω–Ω—è –≥—É—Ä—Ç–∫–∞ (–ü–ï–†–ï–î commit!)
    try:
        from app.services.audit_service import log_audit
        changes_desc = ", ".join([f"{k}: {old_values.get(k)} ‚Üí {v}" for k, v in update_data.items() if old_values.get(k) != v])
        await log_audit(
            db=db,
            action_type="UPDATE",
            entity_type="club",
            entity_id=club.id,
            entity_name=club.name,
            description=f"–û–Ω–æ–≤–ª–µ–Ω–æ –≥—É—Ä—Ç–æ–∫: {club.name}. –ó–º—ñ–Ω–∏: {changes_desc}",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"before": old_values, "after": update_data}
        )
    except Exception as e:
        logger.error(f"‚ùå AUDIT LOG ERROR (club UPDATE): {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    await db.commit()
    await db.refresh(club)
    return club


@router.delete("/{club_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_club(
    club_id: int,
    db: DbSession,
    # admin: AdminUser,  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> None:
    """Delete club with proper cascade handling."""
    from app.models import LessonEvent, BotSchedule, Schedule
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –≥—É—Ä—Ç–æ–∫
    result = await db.execute(select(Club).where(Club.id == club_id))
    club = result.scalar_one_or_none()
    if not club:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Club not found"
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –Ω–∞–∑–≤—É –¥–ª—è –∞—É–¥–∏—Ç—É –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    club_name = club.name
    
    try:
        # 1. –í–∏–¥–∞–ª—è—î–º–æ enrollments
        await db.execute(
            delete(Enrollment).where(Enrollment.club_id == club_id)
        )
        
        # 2. –í–∏–¥–∞–ª—è—î–º–æ conducted lessons
        await db.execute(
            delete(ConductedLesson).where(ConductedLesson.club_id == club_id)
        )
        
        # 3. –í–∏–¥–∞–ª—è—î–º–æ lesson events
        await db.execute(
            delete(LessonEvent).where(LessonEvent.club_id == club_id)
        )
        
        # 4. –í–∏–¥–∞–ª—è—î–º–æ bot schedules –¥–ª—è —Ü—å–æ–≥–æ –∫–ª—É–±—É
        # –°–ø–æ—á–∞—Ç–∫—É –∑–Ω–∞—Ö–æ–¥–∏–º–æ schedules —Ü—å–æ–≥–æ –∫–ª—É–±—É
        schedule_result = await db.execute(select(Schedule.id).where(Schedule.club_id == club_id))
        schedule_ids = [row[0] for row in schedule_result.all()]
        
        if schedule_ids:
            await db.execute(
                delete(BotSchedule).where(BotSchedule.schedule_id.in_(schedule_ids))
            )
        
        # 5. –î–µ–∞–∫—Ç–∏–≤—É—î–º–æ schedules –∑–∞–º—ñ—Å—Ç—å –≤–∏–¥–∞–ª–µ–Ω–Ω—è (–±–µ–∑–ø–µ—á–Ω—ñ—à–µ)
        await db.execute(
            update(Schedule)
            .where(Schedule.club_id == club_id)
            .values(active=False)
        )
        
        # 6. –¢–µ–ø–µ—Ä –º–æ–∂–µ–º–æ –±–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ –≥—É—Ä—Ç–æ–∫
        await db.delete(club)
        
        # üìù AUDIT LOG: –í–∏–¥–∞–ª–µ–Ω–Ω—è –≥—É—Ä—Ç–∫–∞ (–ü–ï–†–ï–î commit!)
        try:
            from app.services.audit_service import log_audit
            await log_audit(
                db=db,
                action_type="DELETE",
                entity_type="club",
                entity_id=club_id,
                entity_name=club_name,
                description=f"–í–∏–¥–∞–ª–µ–Ω–æ –≥—É—Ä—Ç–æ–∫: {club_name}",
                user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                changes={"deleted": {"id": club_id, "name": club_name}}
            )
        except Exception as e:
            logger.error(f"‚ùå AUDIT LOG ERROR (club DELETE): {e}")
            import traceback
            logger.error(traceback.format_exc())
        
        await db.commit()
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error deleting club: {str(e)}"
        )


@router.get("/export/excel")
async def export_clubs_excel(
    db: DbSession,
    # admin: AdminUser,  # –ü–æ–∫–∏ —â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> StreamingResponse:
    """Export all clubs data to Excel."""
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –≥—É—Ä—Ç–∫–∏ –∑ –ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        result = await db.execute(
            select(Club)
            .options(
                selectinload(Club.enrollments).selectinload(Enrollment.student),
                selectinload(Club.schedules),
                selectinload(Club.conducted_lessons)
            )
            .order_by(Club.name)
        )
        clubs = result.scalars().all()
        
        if not clubs:
            raise HTTPException(status_code=404, detail="No clubs found")
        
        # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è Excel
        clubs_data = []
        for club in clubs:
            # –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            total_students = len(club.enrollments)
            active_schedules = len([s for s in club.schedules if s.active])
            total_lessons = len(club.conducted_lessons)
            total_attendance = sum(lesson.present_students for lesson in club.conducted_lessons)
            avg_attendance = (total_attendance / total_lessons) if total_lessons > 0 else 0
            
            clubs_data.append({
                # === –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–ù–∞–∑–≤–∞ –≥—É—Ä—Ç–∫–∞": club.name,
                
                # === –°–¢–ê–¢–ò–°–¢–ò–ö–ê ===
                "–ö—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤": total_students,
                "–ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤": active_schedules,
                "–ü—Ä–æ–≤–µ–¥–µ–Ω–æ –∑–∞–Ω—è—Ç—å": total_lessons,
                "–ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å": total_attendance,
                "–°–µ—Ä–µ–¥–Ω—è –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å": f"{avg_attendance:.1f}",
                
                # === –°–ò–°–¢–ï–ú–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è": club.created_at.strftime("%d.%m.%Y %H:%M") if club.created_at else "‚Äî"
            })
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
        df = pd.DataFrame(clubs_data)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–ì—É—Ä—Ç–∫–∏', index=False)
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–ì—É—Ä—Ç–∫–∏']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            summary_data = {
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': [
                    '–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –≥—É—Ä—Ç–∫—ñ–≤',
                    '–ì—É—Ä—Ç–∫–∏ –∑ —É—á–Ω—è–º–∏',
                    '–ó–∞–≥–∞–ª–æ–º —É—á–Ω—ñ–≤ –∑–∞–ø–∏—Å–∞–Ω–æ',
                    '–ó–∞–≥–∞–ª–æ–º –ø—Ä–æ–≤–µ–¥–µ–Ω–æ –∑–∞–Ω—è—Ç—å',
                    '–ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å'
                ],
                '–ó–Ω–∞—á–µ–Ω–Ω—è': [
                    len(clubs),
                    len([c for c in clubs if c.enrollments]),
                    sum(len(c.enrollments) for c in clubs),
                    sum(len(c.conducted_lessons) for c in clubs),
                    sum(sum(lesson.present_students for lesson in c.conducted_lessons) for c in clubs)
                ]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        output.seek(0)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
        today = datetime.now().strftime('%Y-%m-%d')
        filename = f"clubs_export_{today}.xlsx"
        
        return StreamingResponse(
            io.BytesIO(output.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error exporting clubs: {str(e)}"
        )
