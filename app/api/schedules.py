"""Schedules API endpoints."""

import logging
from datetime import datetime, time
from typing import List, Optional
import io
import pandas as pd

from fastapi import APIRouter, HTTPException, status, Query, Depends
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from sqlalchemy import select, delete, update
from sqlalchemy.orm import selectinload

from app.api.dependencies import AdminUser, DbSession
from app.models import Schedule, Club, Teacher, BotSchedule

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/schedules", tags=["schedules"])


class ScheduleCreate(BaseModel):
    """Schedule creation model."""

    club_id: int
    weekday: int  # 1=Monday, 2=Tuesday, ..., 5=Friday
    start_time: time
    teacher_id: int
    active: bool = True


class ScheduleUpdate(BaseModel):
    """Schedule update model."""

    club_id: Optional[int] = None
    weekday: Optional[int] = None
    start_time: Optional[time] = None
    teacher_id: Optional[int] = None
    active: Optional[bool] = None


class ScheduleResponse(BaseModel):
    """Schedule response model."""

    id: int
    club_id: int
    weekday: int
    start_time: time
    teacher_id: int
    active: bool
    created_at: datetime
    
    # Related objects
    club_name: Optional[str] = None
    teacher_name: Optional[str] = None

    class Config:
        from_attributes = True


@router.get("/", response_model=List[ScheduleResponse])
async def get_schedules(
    db: DbSession,
    admin: AdminUser,
    skip: int = 0,
    limit: int = 100,
    include_inactive: bool = Query(False, description="Include deactivated schedules"),
) -> List[Schedule]:
    """Get all schedules."""
    query = select(Schedule).options(
        selectinload(Schedule.club),
        selectinload(Schedule.teacher),
    )
    
    # üîç –§—ñ–ª—å—Ç—Ä –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤ –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
    if not include_inactive:
        query = query.where(Schedule.active == True)
    
    result = await db.execute(
        query
        .offset(skip)
        .limit(limit)
        .order_by(Schedule.weekday, Schedule.start_time)
    )
    schedules = result.scalars().all()
    
    # Add related data
    for schedule in schedules:
        schedule.club_name = schedule.club.name if schedule.club else None
        schedule.teacher_name = schedule.teacher.full_name if schedule.teacher else None
    
    return schedules


@router.get("/{schedule_id}", response_model=ScheduleResponse)
async def get_schedule(
    schedule_id: int,
    db: DbSession,
    admin: AdminUser,
) -> Schedule:
    """Get schedule by ID."""
    result = await db.execute(
        select(Schedule)
        .options(
            selectinload(Schedule.club),
            selectinload(Schedule.teacher),
        )
        .where(Schedule.id == schedule_id)
    )
    schedule = result.scalar_one_or_none()
    if not schedule:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Schedule not found"
        )
    return schedule


@router.post("/", response_model=ScheduleResponse, status_code=status.HTTP_201_CREATED)
async def create_schedule(
    schedule_data: ScheduleCreate,
    db: DbSession,
    # admin: AdminUser,  # –í—Ä–µ–º–µ–Ω–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω–æ –¥–ª—è –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
) -> Schedule:
    """Create new schedule."""
    schedule = Schedule(**schedule_data.model_dump())
    db.add(schedule)
    await db.commit()
    await db.refresh(schedule)
    
    # ü§ñ –ê–í–¢–û–ú–ê–¢–ò–ß–ù–û —Å—Ç–≤–æ—Ä—é—î–º–æ bot_schedule –∑ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è–º —á–µ—Ä–µ–∑ 5 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫—É
    from app.models import BotSchedule
    from datetime import timedelta
    
    # –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è: start_time + 5 —Ö–≤–∏–ª–∏–Ω
    schedule_start = datetime.combine(datetime.today(), schedule.start_time)
    notification_time = schedule_start + timedelta(minutes=5)
    
    bot_schedule = BotSchedule(
        schedule_id=schedule.id,
        enabled=True,
        offset_minutes=5,  # 5 —Ö–≤–∏–ª–∏–Ω –ø—ñ—Å–ª—è –ø–æ—á–∞—Ç–∫—É —É—Ä–æ–∫—É
        custom_time=notification_time.time(),  # –¢–æ—á–Ω–∏–π —á–∞—Å –¥–ª—è lesson_event_manager
        custom_message="–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥–º—ñ—Ç–∫—É –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ"
    )
    db.add(bot_schedule)
    await db.commit()
    
    # üìù AUDIT LOG: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
    try:
        from app.services.audit_service import log_audit
        # –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–≤'—è–∑–∫–∏ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
        await db.refresh(schedule, ['club', 'teacher'])
        await log_audit(
            db=db,
            action_type="CREATE",
            entity_type="schedule",
            entity_id=schedule.id,
            entity_name=f"{schedule.club.name if schedule.club else '(–≥—É—Ä—Ç–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π)'} - {schedule.weekday}",
            description=f"–°—Ç–≤–æ—Ä–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥: {schedule.club.name if schedule.club else '(–≥—É—Ä—Ç–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π)'}, –≤–∏–∫–ª–∞–¥–∞—á: {schedule.teacher.full_name if schedule.teacher else '(–≤–∏–∫–ª–∞–¥–∞—á –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π)'}, –¥–µ–Ω—å: {schedule.weekday}",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"club_id": schedule.club_id, "teacher_id": schedule.teacher_id, "weekday": schedule.weekday}
        )
    except Exception as e:
        pass
    
    return schedule


@router.put("/{schedule_id}", response_model=ScheduleResponse)
async def update_schedule(
    schedule_id: int,
    schedule_data: ScheduleUpdate,
    db: DbSession,
    # admin: AdminUser,  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> Schedule:
    """Update schedule."""
    result = await db.execute(select(Schedule).where(Schedule.id == schedule_id))
    schedule = result.scalar_one_or_none()
    if not schedule:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Schedule not found"
        )
    
    # Update fields
    update_data = schedule_data.model_dump(exclude_unset=True)
    
    # üîÑ –ö–ê–°–ö–ê–î–ù–ï –û–ù–û–í–õ–ï–ù–ù–Ø: –Ø–∫—â–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è –≤—á–∏—Ç–µ–ª—å - –æ–Ω–æ–≤–∏—Ç–∏ –º–∞–π–±—É—Ç–Ω—ñ lesson_events
    if 'teacher_id' in update_data and update_data['teacher_id'] != schedule.teacher_id:
        from app.models import LessonEvent, Teacher, LessonEventStatus
        from datetime import date
        
        old_teacher_id = schedule.teacher_id
        new_teacher_id = update_data['teacher_id']
        
        logger.info(f"üéØ TEACHER CHANGE DETECTED: schedule {schedule_id}, {old_teacher_id} ‚Üí {new_teacher_id}")
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î –Ω–æ–≤–∏–π –≤—á–∏—Ç–µ–ª—å
        new_teacher_result = await db.execute(
            select(Teacher).where(Teacher.id == new_teacher_id)
        )
        new_teacher = new_teacher_result.scalar_one_or_none()
        
        if not new_teacher:
            raise HTTPException(
                status_code=status.HTTP_404_NOT_FOUND,
                detail="New teacher not found"
            )
        
        logger.info(f"üîç New teacher found: {new_teacher.full_name} (chat_id: {new_teacher.tg_chat_id})")
        
        # –°–ø–æ—á–∞—Ç–∫—É –ø–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —Å–∫—ñ–ª—å–∫–∏ –º–∞–π–±—É—Ç–Ω—ñ—Ö events
        count_result = await db.execute(
            select(LessonEvent.id)
            .where(
                LessonEvent.schedule_id == schedule_id,
                LessonEvent.date >= date.today(),
                LessonEvent.status == LessonEventStatus.PLANNED
            )
        )
        events_to_update = count_result.fetchall()
        logger.info(f"üìä Found {len(events_to_update)} future events to update")
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –¢–Ü–õ–¨–ö–ò –º–∞–π–±—É—Ç–Ω—ñ lesson_events (–∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ)
        future_events_result = await db.execute(
            update(LessonEvent)
            .where(
                LessonEvent.schedule_id == schedule_id,
                LessonEvent.date >= date.today(),
                LessonEvent.status == LessonEventStatus.PLANNED
            )
            .values(
                teacher_id=new_teacher_id,
                teacher_chat_id=new_teacher.tg_chat_id
            )
            .returning(LessonEvent.id)
        )
        
        updated_events = future_events_result.fetchall()
        updated_count = len(updated_events)
        
        logger.info(f"üîÑ CASCADE UPDATE: Schedule {schedule_id} teacher changed from {old_teacher_id} to {new_teacher_id}")
        logger.info(f"üìÖ Updated {updated_count} future lesson_events to new teacher: {new_teacher.full_name}")
        logger.info(f"üéØ Updated event IDs: {[event.id for event in updated_events]}")
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∞—É–¥–∏—Ç—É
    old_values = {}
    for field in update_data.keys():
        old_values[field] = getattr(schedule, field, None)
    
    for field, value in update_data.items():
        setattr(schedule, field, value)
    
    await db.commit()
    await db.refresh(schedule, ['club', 'teacher'])
    
    # üìù AUDIT LOG: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ä–æ–∑–∫–ª–∞–¥—É
    try:
        from app.services.audit_service import log_audit
        changes_desc = ", ".join([f"{k}: {old_values.get(k)} ‚Üí {v}" for k, v in update_data.items() if old_values.get(k) != v])
        await log_audit(
            db=db,
            action_type="UPDATE",
            entity_type="schedule",
            entity_id=schedule.id,
            entity_name=f"{schedule.club.name if schedule.club else '(–≥—É—Ä—Ç–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π)'} - {schedule.weekday}",
            description=f"–û–Ω–æ–≤–ª–µ–Ω–æ —Ä–æ–∑–∫–ª–∞–¥: {schedule.club.name if schedule.club else '(–≥—É—Ä—Ç–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π)'}. –ó–º—ñ–Ω–∏: {changes_desc}",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"before": old_values, "after": update_data}
        )
    except Exception as e:
        pass
    
    return schedule


@router.post("/{schedule_id}/deactivate", response_model=dict)
async def deactivate_schedule(
    schedule_id: int,
    db: DbSession,
    # admin: AdminUser,  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> dict:
    """Delete schedule with proper cascade handling."""
    from app.models import BotSchedule, LessonEvent, ScheduleEnrollment
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ä–æ–∑–∫–ª–∞–¥
    result = await db.execute(select(Schedule).where(Schedule.id == schedule_id))
    schedule = result.scalar_one_or_none()
    if not schedule:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Schedule not found"
        )
    
    try:
        from app.models import Attendance, Payroll, ConductedLesson
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î —ñ—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ (attendance, payroll, conducted_lessons)
        historical_data_query = await db.execute(
            select(LessonEvent.id)
            .where(LessonEvent.schedule_id == schedule_id)
            .where(
                LessonEvent.id.in_(select(Attendance.lesson_event_id)) |
                LessonEvent.id.in_(select(Payroll.lesson_event_id)) |
                LessonEvent.id.in_(select(ConductedLesson.lesson_event_id))
            )
            .limit(1)
        )
        has_historical_data = historical_data_query.scalar_one_or_none() is not None
        
        # üõ°Ô∏è –ó–ê–í–ñ–î–ò –î–ï–ê–ö–¢–ò–í–£–Ñ–ú–û (–±–µ–∑–ø–µ—á–Ω–æ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é)
        schedule.active = False
        
        # –°–∫–∞—Å–æ–≤—É—î–º–æ –º–∞–π–±—É—Ç–Ω—ñ lesson_events 
        from datetime import date
        await db.execute(
            update(LessonEvent)
            .where(
                LessonEvent.schedule_id == schedule_id,
                LessonEvent.date >= date.today(),
                LessonEvent.status == 'PLANNED'
            )
            .values(status='CANCELLED')
        )
        
        # üìù AUDIT LOG: –î–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–æ–∑–∫–ª–∞–¥—É
        try:
            from app.services.audit_service import log_audit
            club_name = schedule.club.name if schedule.club else "(–≥—É—Ä—Ç–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π)"
            teacher_name = schedule.teacher.full_name if schedule.teacher else "(–≤–∏–∫–ª–∞–¥–∞—á –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π)"
            schedule_time = f"{schedule.weekday} {schedule.start_time.strftime('%H:%M')}"
            
            await log_audit(
                db=db,
                action_type="DELETE",
                entity_type="schedule",
                entity_id=schedule_id,
                entity_name=f"{club_name} - {schedule_time}",
                description=f"–î–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Ä–æ–∑–∫–ª–∞–¥: {club_name}, –≤–∏–∫–ª–∞–¥–∞—á: {teacher_name}, –¥–µ–Ω—å: {schedule_time}. –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
                user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                changes={"action": "deactivated", "club": club_name, "teacher": teacher_name, "schedule": schedule_time}
            )
        except Exception as e:
            logger.error(f"‚ùå AUDIT LOG ERROR (schedule DEACTIVATE): {e}")
            import traceback
            logger.error(traceback.format_exc())
        
        await db.commit()
        
        logger.info(f"‚úÖ Schedule {schedule_id} safely deactivated (historical data preserved)")
        
        return {
            "success": True,
            "message": f"–†–æ–∑–∫–ª–∞–¥ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ. –Ü—Å—Ç–æ—Ä–∏—á–Ω—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ.",
            "action": "deactivated",
            "schedule_name": f"{schedule.club.name if schedule.club else 'N/A'}"
        }
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error deleting schedule: {str(e)}"
        )


@router.post("/{schedule_id}/reactivate", response_model=dict)
async def reactivate_schedule(
    schedule_id: int,
    db: DbSession,
    # admin: AdminUser,  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> dict:
    """Reactivate deactivated schedule."""
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Ä–æ–∑–∫–ª–∞–¥
    result = await db.execute(select(Schedule).where(Schedule.id == schedule_id))
    schedule = result.scalar_one_or_none()
    if not schedule:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Schedule not found"
        )
    
    if schedule.active:
        return {
            "success": True,
            "message": "–†–æ–∑–∫–ª–∞–¥ –≤–∂–µ –∞–∫—Ç–∏–≤–Ω–∏–π",
            "action": "already_active"
        }
    
    try:
        # –†–µ–∞–∫—Ç–∏–≤—É—î–º–æ —Ä–æ–∑–∫–ª–∞–¥
        schedule.active = True
        
        # –†–µ–∞–∫—Ç–∏–≤—É—î–º–æ —Å–∫–∞—Å–æ–≤–∞–Ω—ñ –º–∞–π–±—É—Ç–Ω—ñ lesson_events
        from app.models import LessonEvent, LessonEventStatus  
        from datetime import date
        
        await db.execute(
            update(LessonEvent)
            .where(
                LessonEvent.schedule_id == schedule_id,
                LessonEvent.date >= date.today(),
                LessonEvent.status == LessonEventStatus.CANCELLED
            )
            .values(status=LessonEventStatus.PLANNED)
        )
        
        # üìù AUDIT LOG: –†–µ–∞–∫—Ç–∏–≤–∞—Ü—ñ—è —Ä–æ–∑–∫–ª–∞–¥—É
        try:
            from app.services.audit_service import log_audit
            club_name = schedule.club.name if schedule.club else "(–≥—É—Ä—Ç–æ–∫ –Ω–µ –≤–∫–∞–∑–∞–Ω–∏–π)"
            teacher_name = schedule.teacher.full_name if schedule.teacher else "(–≤–∏–∫–ª–∞–¥–∞—á –Ω–µ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–∏–π)"
            schedule_time = f"{schedule.weekday} {schedule.start_time.strftime('%H:%M')}"
            
            await log_audit(
                db=db,
                action_type="UPDATE",
                entity_type="schedule",
                entity_id=schedule_id,
                entity_name=f"{club_name} - {schedule_time}",
                description=f"–†–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ —Ä–æ–∑–∫–ª–∞–¥: {club_name}, –≤–∏–∫–ª–∞–¥–∞—á: {teacher_name}, –¥–µ–Ω—å: {schedule_time}. –í—ñ–¥–Ω–æ–≤–ª–µ–Ω–æ –º–∞–π–±—É—Ç–Ω—ñ –∑–∞–Ω—è—Ç—Ç—è.",
                user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                changes={"action": "reactivated", "club": club_name, "teacher": teacher_name, "schedule": schedule_time, "active": {"before": False, "after": True}}
            )
        except Exception as e:
            logger.error(f"‚ùå AUDIT LOG ERROR (schedule REACTIVATE): {e}")
            import traceback
            logger.error(traceback.format_exc())
        
        await db.commit()
        
        logger.info(f"‚úÖ Schedule {schedule_id} reactivated with future events restored")
        
        return {
            "success": True,
            "message": f"–†–æ–∑–∫–ª–∞–¥ '{schedule.club.name if schedule.club else 'N/A'}' —Ä–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω–æ.",
            "action": "reactivated"
        }
    
    except Exception as e:
        await db.rollback()
        logger.error(f"Error reactivating schedule {schedule_id}: {str(e)}")
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error reactivating schedule: {str(e)}"
        )


@router.get("/export/excel")
async def export_schedules_excel(
    db: DbSession,
    # admin: AdminUser,  # –ü–æ–∫–∏ —â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> StreamingResponse:
    """Export all schedules data to Excel."""
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ –∑ –ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        result = await db.execute(
            select(Schedule)
            .options(
                selectinload(Schedule.club),
                selectinload(Schedule.teacher),
                selectinload(Schedule.bot_schedule)
            )
            .order_by(Schedule.club_id, Schedule.weekday, Schedule.start_time)
        )
        schedules = result.scalars().all()
        
        if not schedules:
            raise HTTPException(status_code=404, detail="No schedules found")
        
        # –ú–∞–ø—ñ–Ω–≥ –¥–Ω—ñ–≤ —Ç–∏–∂–Ω—è
        WEEKDAYS = {
            0: '–ü–æ–Ω–µ–¥—ñ–ª–æ–∫',
            1: '–í—ñ–≤—Ç–æ—Ä–æ–∫', 
            2: '–°–µ—Ä–µ–¥–∞',
            3: '–ß–µ—Ç–≤–µ—Ä',
            4: '–ü\'—è—Ç–Ω–∏—Ü—è',
            5: '–°—É–±–æ—Ç–∞',
            6: '–ù–µ–¥—ñ–ª—è'
        }
        
        # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è Excel
        schedules_data = []
        for schedule in schedules:
            schedules_data.append({
                # === –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–ì—É—Ä—Ç–æ–∫": schedule.club.name if schedule.club else "‚Äî",
                "–í—á–∏—Ç–µ–ª—å": schedule.teacher.full_name if schedule.teacher else "‚Äî",
                "–î–µ–Ω—å —Ç–∏–∂–Ω—è": WEEKDAYS.get(schedule.weekday, "–ù–µ–≤—ñ–¥–æ–º–æ"),
                "–ß–∞—Å –ø–æ—á–∞—Ç–∫—É": schedule.start_time.strftime("%H:%M") if schedule.start_time else "‚Äî",
                
                # === –°–¢–ê–¢–£–° ===
                "–ê–∫—Ç–∏–≤–Ω–∏–π": "–¢–∞–∫" if schedule.active else "–ù—ñ",
                "–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è": "–¢–∞–∫" if schedule.bot_schedule else "–ù—ñ",
                
                # === –°–ò–°–¢–ï–ú–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è": schedule.created_at.strftime("%d.%m.%Y %H:%M") if schedule.created_at else "‚Äî"
            })
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
        df = pd.DataFrame(schedules_data)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–†–æ–∑–∫–ª–∞–¥–∏', index=False)
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–†–æ–∑–∫–ª–∞–¥–∏']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é –ø–æ –¥–Ω—è—Ö
            day_stats = {}
            for schedule in schedules:
                day_name = WEEKDAYS.get(schedule.weekday, "–ù–µ–≤—ñ–¥–æ–º–æ")
                if day_name not in day_stats:
                    day_stats[day_name] = {'total': 0, 'active': 0}
                day_stats[day_name]['total'] += 1
                if schedule.active:
                    day_stats[day_name]['active'] += 1
            
            stats_data = {
                '–î–µ–Ω—å —Ç–∏–∂–Ω—è': list(day_stats.keys()),
                '–ó–∞–≥–∞–ª–æ–º —Ä–æ–∑–∫–ª–∞–¥—ñ–≤': [stats['total'] for stats in day_stats.values()],
                '–ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤': [stats['active'] for stats in day_stats.values()]
            }
            stats_df = pd.DataFrame(stats_data)
            stats_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –¥–Ω—è—Ö', index=False)
            
            # –ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            summary_data = {
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': [
                    '–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–æ–∑–∫–ª–∞–¥—ñ–≤',
                    '–ê–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤',
                    '–ó –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∏–º–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º–∏',
                    '–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≥—É—Ä—Ç–∫—ñ–≤',
                    '–£–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –≤—á–∏—Ç–µ–ª—ñ–≤'
                ],
                '–ó–Ω–∞—á–µ–Ω–Ω—è': [
                    len(schedules),
                    len([s for s in schedules if s.active]),
                    len([s for s in schedules if s.bot_schedule]),
                    len(set(s.club_id for s in schedules if s.club_id)),
                    len(set(s.teacher_id for s in schedules if s.teacher_id))
                ]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='–ó–∞–≥–∞–ª—å–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        output.seek(0)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
        today = datetime.now().strftime('%Y-%m-%d')
        filename = f"schedules_export_{today}.xlsx"
        
        return StreamingResponse(
            io.BytesIO(output.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error exporting schedules: {str(e)}"
        )
