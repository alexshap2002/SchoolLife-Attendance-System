"""Students API endpoints."""

from datetime import date, datetime
from typing import List, Optional
import io
import pandas as pd
import logging

from fastapi import APIRouter, HTTPException, status, UploadFile, File
from fastapi.responses import StreamingResponse
from pydantic import BaseModel
from sqlalchemy import select, delete
from sqlalchemy.orm import selectinload

from app.api.dependencies import AdminUser, DbSession
from app.models import Student, Enrollment, Club, Attendance, ScheduleEnrollment

logger = logging.getLogger(__name__)

router = APIRouter(prefix="/students", tags=["students"])


class StudentCreate(BaseModel):
    """Student creation model."""

    first_name: str
    last_name: str
    birth_date: Optional[date] = None
    age: Optional[int] = None
    grade: Optional[str] = None
    phone_child: Optional[str] = None
    location: Optional[str] = None
    address: Optional[str] = None
    parent_name: Optional[str] = None
    father_name: Optional[str] = None
    mother_name: Optional[str] = None
    phone_mother: Optional[str] = None
    phone_father: Optional[str] = None
    settlement_type: Optional[str] = None
    
    # –ü—ñ–ª—å–≥–∏
    benefit_low_income: bool = False
    benefit_large_family: bool = False
    benefit_military_family: bool = False
    benefit_internally_displaced: bool = False
    benefit_orphan: bool = False
    benefit_disability: bool = False
    benefit_social_risk: bool = False
    benefit_other: Optional[str] = None
    
    benefits_json: Optional[dict] = None
    raw_row_id: Optional[str] = None


class StudentUpdate(BaseModel):
    """Student update model."""

    first_name: Optional[str] = None
    last_name: Optional[str] = None
    birth_date: Optional[date] = None
    age: Optional[int] = None
    grade: Optional[str] = None
    phone_child: Optional[str] = None
    location: Optional[str] = None
    address: Optional[str] = None
    parent_name: Optional[str] = None
    father_name: Optional[str] = None
    mother_name: Optional[str] = None
    phone_mother: Optional[str] = None
    phone_father: Optional[str] = None
    settlement_type: Optional[str] = None
    
    # –ü—ñ–ª—å–≥–∏
    benefit_low_income: Optional[bool] = None
    benefit_large_family: Optional[bool] = None
    benefit_military_family: Optional[bool] = None
    benefit_internally_displaced: Optional[bool] = None
    benefit_orphan: Optional[bool] = None
    benefit_disability: Optional[bool] = None
    benefit_social_risk: Optional[bool] = None
    benefit_other: Optional[str] = None
    
    benefits_json: Optional[dict] = None


class StudentResponse(BaseModel):
    """Student response model."""

    id: int
    first_name: str
    last_name: str
    birth_date: Optional[date]
    age: Optional[int]
    grade: Optional[str]
    phone_child: Optional[str]
    location: Optional[str]
    address: Optional[str]
    parent_name: Optional[str]
    father_name: Optional[str]
    mother_name: Optional[str]
    phone_mother: Optional[str]
    phone_father: Optional[str]
    settlement_type: Optional[str]
    
    # –ü—ñ–ª—å–≥–∏
    benefit_low_income: bool
    benefit_large_family: bool
    benefit_military_family: bool
    benefit_internally_displaced: bool
    benefit_orphan: bool
    benefit_disability: bool
    benefit_social_risk: bool
    benefit_other: Optional[str]
    
    benefits_json: Optional[dict]
    raw_row_id: Optional[str]
    created_at: datetime

    @property
    def full_name(self) -> str:
        return f"{self.first_name} {self.last_name}"

    class Config:
        from_attributes = True


@router.get("/", response_model=List[StudentResponse])
async def get_students(
    db: DbSession,
    admin: AdminUser,
    skip: int = 0,
    limit: int = 100,
) -> List[Student]:
    """Get all students."""
    result = await db.execute(
        select(Student)
        .options(selectinload(Student.enrollments))
        .offset(skip)
        .limit(limit)
    )
    return result.scalars().all()


@router.get("/{student_id}", response_model=StudentResponse)
async def get_student(
    student_id: int,
    db: DbSession,
    admin: AdminUser,
) -> Student:
    """Get student by ID."""
    result = await db.execute(
        select(Student)
        .options(selectinload(Student.enrollments))
        .where(Student.id == student_id)
    )
    student = result.scalar_one_or_none()
    if not student:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Student not found"
        )
    return student


@router.post("/", response_model=StudentResponse, status_code=status.HTTP_201_CREATED)
async def create_student(
    student_data: StudentCreate,
    db: DbSession,
    admin: AdminUser,
) -> Student:
    """Create new student."""
    student = Student(**student_data.model_dump())
    db.add(student)
    await db.flush()  # Flush —â–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ ID
    
    # üìù AUDIT LOG: –°—Ç–≤–æ—Ä–µ–Ω–Ω—è —É—á–Ω—è (–ü–ï–†–ï–î commit!)
    logger.info(f"üîç TRYING TO LOG AUDIT for student CREATE: {student.id}")
    try:
        from app.services.audit_service import log_audit
        logger.info(f"üîç CALLING log_audit for CREATE...")
        result = await log_audit(
            db=db,
            action_type="CREATE",
            entity_type="student",
            entity_id=student.id,
            entity_name=f"{student.first_name} {student.last_name}",
            description=f"–°—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–æ–≥–æ —É—á–Ω—è: {student.first_name} {student.last_name}, –∫–ª–∞—Å {student.grade or '–Ω–µ –≤–∫–∞–∑–∞–Ω–æ'}",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"after": {"first_name": student.first_name, "last_name": student.last_name, "grade": student.grade}}
        )
        logger.info(f"üîç log_audit CREATE RETURNED: {result}")
    except Exception as e:
        logger.error(f"‚ùå AUDIT LOG ERROR (student CREATE): {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    await db.commit()
    await db.refresh(student)
    return student


@router.put("/{student_id}", response_model=StudentResponse)
async def update_student(
    student_id: int,
    student_data: StudentUpdate,
    db: DbSession,
    admin: AdminUser,
) -> Student:
    """Update student."""
    result = await db.execute(select(Student).where(Student.id == student_id))
    student = result.scalar_one_or_none()
    if not student:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Student not found"
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —Å—Ç–∞—Ä—ñ –∑–Ω–∞—á–µ–Ω–Ω—è –¥–ª—è –∞—É–¥–∏—Ç—É
    old_values = {}
    update_data = student_data.model_dump(exclude_unset=True)
    for field in update_data.keys():
        old_values[field] = getattr(student, field, None)
    
    # Update fields
    for field, value in update_data.items():
        setattr(student, field, value)
    
    # üìù AUDIT LOG: –û–Ω–æ–≤–ª–µ–Ω–Ω—è —É—á–Ω—è (–ü–ï–†–ï–î commit!)
    logger.info(f"üîç TRYING TO LOG AUDIT for student UPDATE: {student.id}")
    try:
        from app.services.audit_service import log_audit
        changes_desc = ", ".join([f"{k}: {old_values.get(k)} ‚Üí {v}" for k, v in update_data.items() if old_values.get(k) != v])
        logger.info(f"üîç CALLING log_audit...")
        result = await log_audit(
            db=db,
            action_type="UPDATE",
            entity_type="student",
            entity_id=student.id,
            entity_name=f"{student.first_name} {student.last_name}",
            description=f"–û–Ω–æ–≤–ª–µ–Ω–æ –¥–∞–Ω—ñ —É—á–Ω—è: {student.first_name} {student.last_name}. –ó–º—ñ–Ω–∏: {changes_desc}",
            user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
            changes={"before": old_values, "after": update_data}
        )
        logger.info(f"üîç log_audit RETURNED: {result}")
    except Exception as e:
        logger.error(f"‚ùå AUDIT LOG ERROR (student UPDATE): {e}")
        import traceback
        logger.error(traceback.format_exc())
    
    await db.commit()
    await db.refresh(student)
    return student


@router.delete("/{student_id}", status_code=status.HTTP_204_NO_CONTENT)
async def delete_student(
    student_id: int,
    db: DbSession,
    # admin: AdminUser,  # –¢–∏–º—á–∞—Å–æ–≤–æ –≤—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> None:
    """Delete student with proper cascade handling."""
    print(f"üî• DELETE STUDENT CALLED FOR ID: {student_id}")
    
    # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —ñ—Å–Ω—É—î —Å—Ç—É–¥–µ–Ω—Ç
    result = await db.execute(select(Student).where(Student.id == student_id))
    student = result.scalar_one_or_none()
    if not student:
        raise HTTPException(
            status_code=status.HTTP_404_NOT_FOUND,
            detail="Student not found"
        )
    
    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ —ñ–º'—è –¥–ª—è –∞—É–¥–∏—Ç—É –ø–µ—Ä–µ–¥ –≤–∏–¥–∞–ª–µ–Ω–Ω—è–º
    student_name = f"{student.first_name} {student.last_name}"
    
    try:
        # 1. –í–∏–¥–∞–ª—è—î–º–æ attendance records
        await db.execute(
            delete(Attendance).where(Attendance.student_id == student_id)
        )
        
        # 2. –í–∏–¥–∞–ª—è—î–º–æ enrollments  
        await db.execute(
            delete(Enrollment).where(Enrollment.student_id == student_id)
        )
        
        # 3. –í–∏–¥–∞–ª—è—î–º–æ schedule enrollments
        await db.execute(
            delete(ScheduleEnrollment).where(ScheduleEnrollment.student_id == student_id)
        )
        
        # 4. –¢–µ–ø–µ—Ä –º–æ–∂–µ–º–æ –±–µ–∑–ø–µ—á–Ω–æ –≤–∏–¥–∞–ª–∏—Ç–∏ —Å—Ç—É–¥–µ–Ω—Ç–∞
        await db.delete(student)
        
        # üìù AUDIT LOG: –í–∏–¥–∞–ª–µ–Ω–Ω—è —É—á–Ω—è (–ü–ï–†–ï–î commit!)
        print(f"üî•üî•üî• DELETE STUDENT {student_id} - BEFORE AUDIT LOG üî•üî•üî•")
        logger.info(f"üîç TRYING TO LOG AUDIT for student DELETE: {student_id}")
        try:
            from app.services.audit_service import log_audit
            logger.info(f"üîç CALLING log_audit for DELETE...")
            result = await log_audit(
                db=db,
                action_type="DELETE",
                entity_type="student",
                entity_id=student_id,
                entity_name=student_name,
                description=f"–í–∏–¥–∞–ª–µ–Ω–æ —É—á–Ω—è: {student_name}",
                user_name="–ê–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä",
                changes={"deleted": {"id": student_id, "name": student_name}}
            )
            logger.info(f"üîç log_audit DELETE RETURNED: {result}")
        except Exception as e:
            logger.error(f"‚ùå AUDIT LOG ERROR (student DELETE): {e}")
            import traceback
            logger.error(traceback.format_exc())
        
        await db.commit()
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error deleting student: {str(e)}"
        )


@router.get("/template/download")
async def download_students_template(
    # admin: AdminUser,  # –ü–æ–∫–∏ —â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
):
    """Download Excel template for students import."""
    # –°—Ç–≤–æ—Ä—é—î–º–æ —à–∞–±–ª–æ–Ω Excel —Ñ–∞–π–ª—É
    template_data = {
        # === –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –î–ò–¢–ò–ù–£ ===
        "–Ü–º'—è *": ["–Ü–≤–∞–Ω", "–ú–∞—Ä—ñ—è", "–û–ª–µ–∫—Å–∞–Ω–¥—Ä", "–ö–∞—Ç–µ—Ä–∏–Ω–∞", "–ú–∏—Ö–∞–π–ª–æ"],
        "–ü—Ä—ñ–∑–≤–∏—â–µ *": ["–ü–µ—Ç—Ä–µ–Ω–∫–æ", "–Ü–≤–∞–Ω–µ–Ω–∫–æ", "–ö–æ–≤–∞–ª–µ–Ω–∫–æ", "–ú–æ—Ä–æ–∑–µ–Ω–∫–æ", "–°–∏–¥–æ—Ä–µ–Ω–∫–æ"],
        "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (YYYY-MM-DD)": ["2010-05-15", "2011-03-22", "2009-08-10", "2012-12-03", "2008-07-25"],
        "–í—ñ–∫": [13, 12, 14, 11, 15],
        "–ö–ª–∞—Å": ["7-–ê", "6-–ë", "8-–í", "5-–ì", "9-–ê"],
        "–¢–µ–ª–µ—Ñ–æ–Ω –¥–∏—Ç–∏–Ω–∏": ["+380501234567", "+380507654321", "+380509876543", "+380632345678", "+380445556677"],
        
        # === –ê–î–†–ï–°–ê –¢–ê –ú–Ü–°–¶–ï –ü–†–û–ñ–ò–í–ê–ù–ù–Ø ===
        "–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É": ["–º—ñ—Å—Ç–æ", "–º—ñ—Å—Ç–æ", "—Å–µ–ª–∏—â–µ –º—ñ—Å—å–∫–æ–≥–æ —Ç–∏–ø—É", "—Å–µ–ª–æ", "–º—ñ—Å—Ç–æ"],
        "–ú—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è": ["–ö–∏—ó–≤", "–õ—å–≤—ñ–≤", "–ë—Ä—É—Å–∏–ª—ñ–≤", "–ú–∞–∫–∞—Ä—ñ–≤", "–ñ–∏—Ç–æ–º–∏—Ä"],
        "–ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è": ["–≤—É–ª. –•—Ä–µ—â–∞—Ç–∏–∫ 1, –∫–≤. 15", "–≤—É–ª. –†–∏–Ω–æ–∫ 5", "–≤—É–ª. –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞ 10", "–≤—É–ª. –ú–∏—Ä—É 3, –∫–≤. 7", "–ø—Ä. –ü–µ—Ä–µ–º–æ–≥–∏ 45, –∫–≤. 102"],
        
        # === –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ë–ê–¢–¨–ö–Ü–í ===
        "–ü–Ü–ë –±–∞—Ç—å–∫–∞ (–ø–æ–≤–Ω—ñ—Å—Ç—é)": ["–ü–µ—Ç—Ä–µ–Ω–∫–æ –û–ª–µ–∫—Å—ñ–π –Ü–≤–∞–Ω–æ–≤–∏—á", "‚Äî", "–ö–æ–≤–∞–ª–µ–Ω–∫–æ –ú–∏–∫–æ–ª–∞ –í–∞—Å–∏–ª—å–æ–≤–∏—á", "–ú–æ—Ä–æ–∑–µ–Ω–∫–æ –ê–Ω–¥—Ä—ñ–π –ü–µ—Ç—Ä–æ–≤–∏—á", "–°–∏–¥–æ—Ä–µ–Ω–∫–æ –í–æ–ª–æ–¥–∏–º–∏—Ä –û–ª–µ–≥–æ–≤–∏—á"],
        "–ü–Ü–ë –º–∞—Ç–µ—Ä—ñ (–ø–æ–≤–Ω—ñ—Å—Ç—é)": ["–ü–µ—Ç—Ä–µ–Ω–∫–æ –û–∫—Å–∞–Ω–∞ –ú–∏–∫–æ–ª–∞—ó–≤–Ω–∞", "–Ü–≤–∞–Ω–µ–Ω–∫–æ –û–ª—å–≥–∞ –ü–µ—Ç—Ä—ñ–≤–Ω–∞", "–ö–æ–≤–∞–ª–µ–Ω–∫–æ –¢–µ—Ç—è–Ω–∞ –û–ª–µ–∫—Å–∞–Ω–¥—Ä—ñ–≤–Ω–∞", "–ú–æ—Ä–æ–∑–µ–Ω–∫–æ –°–≤—ñ—Ç–ª–∞–Ω–∞ –Ü–≤–∞–Ω—ñ–≤–Ω–∞", "–°–∏–¥–æ—Ä–µ–Ω–∫–æ –ù–∞—Ç–∞–ª—ñ—è –í–∞—Å–∏–ª—ñ–≤–Ω–∞"],
        "–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—Ç–µ—Ä—ñ": ["+380509876543", "+380502345678", "+380501112233", "+380674445566", "+380637778899"],
        "–¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ç—å–∫–∞": ["+380671234567", "‚Äî", "+380672223344", "+380505556677", "+380668889911"],
        
        # === –ü–Ü–õ–¨–ì–ò –¢–ê –°–û–¶–Ü–ê–õ–¨–ù–Ü –°–¢–ê–¢–£–°–ò ===
        "–ú–∞–ª–æ–∑–∞–±–µ–∑–ø–µ—á–µ–Ω—ñ (—Ç–∞–∫/–Ω—ñ)": ["–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ"],
        "–ë–∞–≥–∞—Ç–æ–¥—ñ—Ç–Ω—ñ (—Ç–∞–∫/–Ω—ñ)": ["—Ç–∞–∫", "–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ", "—Ç–∞–∫"],
        "–°—ñ–º'—è –ó–°–£ (—Ç–∞–∫/–Ω—ñ)": ["–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ"],
        "–í–ü–û (—Ç–∞–∫/–Ω—ñ)": ["–Ω—ñ", "–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ", "–Ω—ñ"],
        "–°–∏—Ä–æ—Ç–∞/–ø—ñ–¥ –æ–ø—ñ–∫–æ—é (—Ç–∞–∫/–Ω—ñ)": ["–Ω—ñ", "–Ω—ñ", "–Ω—ñ", "–Ω—ñ", "–Ω—ñ"],
        "–î–∏—Ç–∏–Ω–∞ –∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é (—Ç–∞–∫/–Ω—ñ)": ["–Ω—ñ", "–Ω—ñ", "–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ"],
        "–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫ (—Ç–∞–∫/–Ω—ñ)": ["–Ω—ñ", "—Ç–∞–∫", "–Ω—ñ", "–Ω—ñ", "–Ω—ñ"],
        "–Ü–Ω—à—ñ –ø—ñ–ª—å–≥–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è": ["–í—ñ–¥–º—ñ–Ω–Ω–∏–∫ –Ω–∞–≤—á–∞–Ω–Ω—è", "–î–∏—Ç–∏–Ω–∞ —É—á–∞—Å–Ω–∏–∫–∞ –ê–¢–û, –º–∞—î –∞–ª–µ—Ä–≥—ñ—é –Ω–∞ –≥–æ—Ä—ñ—Ö–∏", "–ê–∫—Ç–∏–≤–Ω–∏–π —É—á–∞—Å–Ω–∏–∫ —à–∫—ñ–ª—å–Ω–∏—Ö –∑–∞—Ö–æ–¥—ñ–≤", "–î–∏—Ç–∏–Ω–∞ –∑ –æ—Å–æ–±–ª–∏–≤–∏–º–∏ –æ—Å–≤—ñ—Ç–Ω—ñ–º–∏ –ø–æ—Ç—Ä–µ–±–∞–º–∏, –ø–æ—Ç—Ä–µ–±—É—î —ñ–Ω–¥–∏–≤—ñ–¥—É–∞–ª—å–Ω–æ–≥–æ –ø—ñ–¥—Ö–æ–¥—É", "–ú–∞—î –æ–±–º–µ–∂–µ–Ω–Ω—è –ø–æ —Ñ—ñ–∑–∏—á–Ω–∏—Ö –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è—Ö"]
    }
    
    df = pd.DataFrame(template_data)
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
    output = io.BytesIO()
    with pd.ExcelWriter(output, engine='openpyxl') as writer:
        df.to_excel(writer, sheet_name='–£—á–Ω—ñ', index=False)
        
        # –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –∑ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è–º–∏
        instructions = pd.DataFrame({
            '–Ü–ù–°–¢–†–£–ö–¶–Ü–á –î–õ–Ø –ó–ê–ü–û–í–ù–ï–ù–ù–Ø –ê–ù–ö–ï–¢–ò –£–ß–ù–Ü–í': [
                '1. –û–ë–û–í\'–Ø–ó–ö–û–í–Ü –ü–û–õ–Ø (*): –Ü–º\'—è —Ç–∞ –ü—Ä—ñ–∑–≤–∏—â–µ —î –æ–±–æ–≤\'—è–∑–∫–æ–≤–∏–º–∏ –¥–ª—è –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è',
                '2. –î–ê–¢–ê –ù–ê–†–û–î–ñ–ï–ù–ù–Ø: –í–∫–∞–∑—É–π—Ç–µ —É —Ñ–æ—Ä–º–∞—Ç—ñ YYYY-MM-DD (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: 2010-05-15)',
                '3. –¢–ï–õ–ï–§–û–ù–ò: –£ —Ñ–æ—Ä–º–∞—Ç—ñ +380XXXXXXXXX –∞–±–æ –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º —è–∫—â–æ –Ω–µ–º–∞—î',
                '4. –ê–î–†–ï–°–ê: –í–∫–∞–∂—ñ—Ç—å –ø–æ–≤–Ω—É –∞–¥—Ä–µ—Å—É –≤–∫–ª—é—á–Ω–æ –∑ –∫–≤–∞—Ä—Ç–∏—Ä–æ—é (—è–∫—â–æ —î)',
                '5. –¢–ò–ü –ù–ê–°–ï–õ–ï–ù–û–ì–û –ü–£–ù–ö–¢–£: —Å–µ–ª–æ, —Å–µ–ª–∏—â–µ –º—ñ—Å—å–∫–æ–≥–æ —Ç–∏–ø—É, –º—ñ—Å—Ç–æ',
                '6. –ü–Ü–õ–¨–ì–ò: –ü–∏—à—ñ—Ç—å "—Ç–∞–∫" –∞–±–æ "–Ω—ñ" –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Ç–∏–ø—É –ø—ñ–ª—å–≥',
                '7. –î–û–î–ê–¢–ö–û–í–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø: –û—Å–æ–±–ª–∏–≤—ñ –ø—Ä–∏–º—ñ—Ç–∫–∏ (–∞–ª–µ—Ä–≥—ñ—ó, –æ–±–º–µ–∂–µ–Ω–Ω—è, –æ—Å–æ–±–ª–∏–≤–æ—Å—Ç—ñ)',
                '8. –Ü–ù–®–Ü –ü–Ü–õ–¨–ì–ò: –¢–µ–∫—Å—Ç–æ–≤–∏–π –æ–ø–∏—Å –¥–æ–¥–∞—Ç–∫–æ–≤–∏—Ö –ø—ñ–ª—å–≥ –∞–±–æ —Å—Ç–∞—Ç—É—Å—ñ–≤',
                '9. –í–∏–¥–∞–ª—ñ—Ç—å –≤—Å—ñ –ø—Ä–∏–∫–ª–∞–¥–∏ –ø–µ—Ä–µ–¥ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è–º –≤–ª–∞—Å–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏',
                '10. –ú–æ–∂–Ω–∞ –¥–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ —Ä—è–¥–∫–∏ –∑ —É—á–Ω—è–º–∏ (—Å–∫–æ–ø—ñ—é–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç)',
                '11. –ù–ï –ó–ú–Ü–ù–Æ–ô–¢–ï –Ω–∞–∑–≤–∏ –∫–æ–ª–æ–Ω–æ–∫ - —Ü–µ –∑–ª–∞–º–∞—î —ñ–º–ø–æ—Ä—Ç!',
                '12. –Ø–∫—â–æ –Ω–µ–º–∞—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó - –∑–∞–ª–∏—à—Ç–µ –ø–æ—Ä–æ–∂–Ω—ñ–º –∞–±–æ –Ω–∞–ø–∏—à—ñ—Ç—å "‚Äî"'
            ]
        })
        
        # –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –∑ –ø–æ—è—Å–Ω–µ–Ω–Ω—è–º–∏ –ø–æ –ø—ñ–ª—å–≥–∞—Ö
        benefits_info = pd.DataFrame({
            '–¢–ò–ü–ò –ü–Ü–õ–¨–ì –¢–ê –á–• –ó–ù–ê–ß–ï–ù–ù–Ø': [
                '–ú–∞–ª–æ–∑–∞–±–µ–∑–ø–µ—á–µ–Ω—ñ - —Å—ñ–º\'—ó –∑ –Ω–∏–∑—å–∫–∏–º —Ä—ñ–≤–Ω–µ–º –¥–æ—Ö–æ–¥—É',
                '–ë–∞–≥–∞—Ç–æ–¥—ñ—Ç–Ω—ñ - —Å—ñ–º\'—ó –∑ —Ç—Ä—å–æ–º–∞ —ñ –±—ñ–ª—å—à–µ –¥—ñ—Ç—å–º–∏',
                '–°—ñ–º\'—è –ó–°–£ - –¥—ñ—Ç–∏ –≤—ñ–π—Å—å–∫–æ–≤–æ—Å–ª—É–∂–±–æ–≤—Ü—ñ–≤ –ó–°–£',
                '–í–ü–û - –≤–Ω—É—Ç—Ä—ñ—à–Ω—å–æ –ø–µ—Ä–µ–º—ñ—â–µ–Ω—ñ –æ—Å–æ–±–∏',
                '–°–∏—Ä–æ—Ç–∞/–ø—ñ–¥ –æ–ø—ñ–∫–æ—é - –¥—ñ—Ç–∏-—Å–∏—Ä–æ—Ç–∏ –∞–±–æ –ø—ñ–¥ –æ–ø—ñ–∫–æ—é',
                '–î–∏—Ç–∏–Ω–∞ –∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é - –¥—ñ—Ç–∏ –∑ –æ—Å–æ–±–ª–∏–≤–∏–º–∏ –ø–æ—Ç—Ä–µ–±–∞–º–∏',
                '–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫ - –¥—ñ—Ç–∏ –≤ —Å–∫–ª–∞–¥–Ω–∏—Ö –∂–∏—Ç—Ç—î–≤–∏—Ö –æ–±—Å—Ç–∞–≤–∏–Ω–∞—Ö',
                '–Ü–Ω—à—ñ –ø—ñ–ª—å–≥–∏ - –¥–æ–¥–∞—Ç–∫–æ–≤—ñ —Å—Ç–∞—Ç—É—Å–∏ –∞–±–æ –ø—ñ–ª—å–≥–∏ (–æ–ø–∏—à—ñ—Ç—å —Ç–µ–∫—Å—Ç–æ–º)'
            ]
        })
        instructions.to_excel(writer, sheet_name='–Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó', index=False)
        benefits_info.to_excel(writer, sheet_name='–ü–æ—è—Å–Ω–µ–Ω–Ω—è –ø—ñ–ª—å–≥', index=False)
    
    output.seek(0)
    
    return StreamingResponse(
        io.BytesIO(output.read()),
        media_type='application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        headers={"Content-Disposition": "attachment; filename=shablon_uchniv.xlsx"}
    )


class ImportStudentsResponse(BaseModel):
    """Response for students import."""
    success: bool
    message: str
    created_count: int
    skipped_count: int
    errors: List[str]


@router.post("/import", response_model=ImportStudentsResponse)
async def import_students(
    db: DbSession,
    file: UploadFile = File(...),
    skip_duplicates: bool = True,
    # admin: AdminUser,  # –ü–æ–∫–∏ —â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> ImportStudentsResponse:
    """Import students from Excel file."""
    if not file.filename.endswith(('.xlsx', '.xls')):
        raise HTTPException(
            status_code=status.HTTP_400_BAD_REQUEST,
            detail="File must be Excel format (.xlsx or .xls)"
        )
    
    try:
        # –ß–∏—Ç–∞—î–º–æ Excel —Ñ–∞–π–ª
        contents = await file.read()
        df = pd.read_excel(io.BytesIO(contents), sheet_name='–£—á–Ω—ñ')
        
        created_count = 0
        skipped_count = 0
        errors = []
        
        # –ú–∞–ø—ñ–Ω–≥ –∫–æ–ª–æ–Ω–æ–∫ - –û–ß–ò–©–ï–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –£–ß–ù–Ü–í (–±–µ–∑ –∑–∞–π–≤–∏—Ö –ø–æ–ª—ñ–≤ –±–∞—Ç—å–∫—ñ–≤)
        column_mapping = {
            "–Ü–º'—è *": "first_name",
            "–ü—Ä—ñ–∑–≤–∏—â–µ *": "last_name", 
            "–î–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (YYYY-MM-DD)": "birth_date",
            "–í—ñ–∫": "age",
            "–ö–ª–∞—Å": "grade",
            "–¢–µ–ª–µ—Ñ–æ–Ω –¥–∏—Ç–∏–Ω–∏": "phone_child",
            "–ú—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è": "location",
            "–ê–¥—Ä–µ—Å–∞ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è": "address",
            "–ü–Ü–ë –±–∞—Ç—å–∫–∞ (–ø–æ–≤–Ω—ñ—Å—Ç—é)": "father_name",
            "–ü–Ü–ë –º–∞—Ç–µ—Ä—ñ (–ø–æ–≤–Ω—ñ—Å—Ç—é)": "mother_name",
            "–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—Ç–µ—Ä—ñ": "phone_mother",
            "–¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ç—å–∫–∞": "phone_father",
            # üìç –î–ï–¢–ê–õ–¨–ù–ê –ê–î–†–ï–°–ê
            "–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É": "settlement_type",
            # üèÜ –ü–Ü–õ–¨–ì–ò –¢–ê –°–¢–ê–¢–£–°–ò
            "–ú–∞–ª–æ–∑–∞–±–µ–∑–ø–µ—á–µ–Ω—ñ (—Ç–∞–∫/–Ω—ñ)": "benefit_low_income",
            "–ë–∞–≥–∞—Ç–æ–¥—ñ—Ç–Ω—ñ (—Ç–∞–∫/–Ω—ñ)": "benefit_large_family", 
            "–°—ñ–º'—è –ó–°–£ (—Ç–∞–∫/–Ω—ñ)": "benefit_military_family",
            "–í–ü–û (—Ç–∞–∫/–Ω—ñ)": "benefit_internally_displaced",
            "–°–∏—Ä–æ—Ç–∞/–ø—ñ–¥ –æ–ø—ñ–∫–æ—é (—Ç–∞–∫/–Ω—ñ)": "benefit_orphan",
            "–î–∏—Ç–∏–Ω–∞ –∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é (—Ç–∞–∫/–Ω—ñ)": "benefit_disability",
            "–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫ (—Ç–∞–∫/–Ω—ñ)": "benefit_social_risk",
            "–Ü–Ω—à—ñ –ø—ñ–ª—å–≥–∏ —Ç–∞ –¥–æ–¥–∞—Ç–∫–æ–≤–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è": "benefit_other"  # –í–∫–ª—é—á–∞—î —è–∫ –ø—ñ–ª—å–≥–∏ —Ç–∞–∫ —ñ –ø—Ä–∏–º—ñ—Ç–∫–∏
        }
        
        for index, row in df.iterrows():
            try:
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –æ–±–æ–≤'—è–∑–∫–æ–≤—ñ –ø–æ–ª—è
                if pd.isna(row.get("–Ü–º'—è *")) or pd.isna(row.get("–ü—Ä—ñ–∑–≤–∏—â–µ *")):
                    errors.append(f"–†—è–¥–æ–∫ {index + 2}: –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ —î –æ–±–æ–≤'—è–∑–∫–æ–≤–∏–º–∏")
                    continue
                
                first_name = str(row["–Ü–º'—è *"]).strip()
                last_name = str(row["–ü—Ä—ñ–∑–≤–∏—â–µ *"]).strip()
                
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –¥—É–±–ª—ñ–∫–∞—Ç–∏
                if skip_duplicates:
                    result = await db.execute(
                        select(Student).where(
                            Student.first_name == first_name,
                            Student.last_name == last_name
                        )
                    )
                    existing = result.scalar_one_or_none()
                    if existing:
                        skipped_count += 1
                        continue
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∞–Ω—ñ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç–∞
                student_data = {
                    "first_name": first_name,
                    "last_name": last_name
                }
                
                # –î–æ–¥–∞—î–º–æ –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω—ñ –ø–æ–ª—è
                for excel_col, db_field in column_mapping.items():
                    if excel_col in ["–Ü–º'—è *", "–ü—Ä—ñ–∑–≤–∏—â–µ *"]:
                        continue
                        
                    value = row.get(excel_col)
                    if not pd.isna(value):
                        if db_field == "birth_date":
                            # –û–±—Ä–æ–±–ª—è—î–º–æ –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è
                            if isinstance(value, str):
                                try:
                                    student_data[db_field] = datetime.strptime(value, "%Y-%m-%d").date()
                                except ValueError:
                                    errors.append(f"–†—è–¥–æ–∫ {index + 2}: –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è")
                                    continue
                            elif hasattr(value, 'date'):
                                student_data[db_field] = value.date()
                        elif db_field == "age":
                            student_data[db_field] = int(value) if not pd.isna(value) else None
                        elif db_field.startswith("benefit_") and db_field != "benefit_other":
                            # –û–±—Ä–æ–±–ª—è—î–º–æ –±—É–ª–µ–≤—ñ –ø–æ–ª—è –ø—ñ–ª—å–≥
                            if isinstance(value, str):
                                value_lower = value.lower().strip()
                                student_data[db_field] = value_lower in ["—Ç–∞–∫", "yes", "true", "1", "+"]
                            else:
                                student_data[db_field] = bool(value)
                        else:
                            student_data[db_field] = str(value).strip() if str(value).strip() else None
                
                # –°—Ç–≤–æ—Ä—é—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
                student = Student(**student_data)
                db.add(student)
                created_count += 1
                
            except Exception as e:
                errors.append(f"–†—è–¥–æ–∫ {index + 2}: –ü–æ–º–∏–ª–∫–∞ –æ–±—Ä–æ–±–∫–∏ - {str(e)}")
                continue
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –∑–º—ñ–Ω–∏
        await db.commit()
        
        return ImportStudentsResponse(
            success=True,
            message=f"–Ü–º–ø–æ—Ä—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ. –°—Ç–≤–æ—Ä–µ–Ω–æ: {created_count}, –ø—Ä–æ–ø—É—â–µ–Ω–æ: {skipped_count}",
            created_count=created_count,
            skipped_count=skipped_count,
            errors=errors
        )
        
    except Exception as e:
        await db.rollback()
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —ñ–º–ø–æ—Ä—Ç—ñ —Ñ–∞–π–ª—É: {str(e)}"
        )


@router.get("/export/excel")
async def export_students_excel(
    db: DbSession,
    # admin: AdminUser,  # –ü–æ–∫–∏ —â–æ –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—é –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è
) -> StreamingResponse:
    """Export all students data to Excel with full information."""
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ—Ö —É—á–Ω—ñ–≤ –∑ –ø–æ–≤'—è–∑–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        result = await db.execute(
            select(Student)
            .options(
                selectinload(Student.enrollments).selectinload(Enrollment.club),
                selectinload(Student.attendance_records).selectinload(Attendance.lesson_event)
            )
            .order_by(Student.last_name, Student.first_name)
        )
        students = result.scalars().all()
        
        if not students:
            raise HTTPException(status_code=404, detail="No students found")
        
        # –ü—ñ–¥–≥–æ—Ç—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è Excel
        students_data = []
        for student in students:
            # –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ
            total_attendance = len(student.attendance_records)
            present_count = sum(1 for att in student.attendance_records if att.status.value == 'PRESENT')
            attendance_rate = (present_count / total_attendance * 100) if total_attendance > 0 else 0
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å–ø–∏—Å–æ–∫ –≥—É—Ä—Ç–∫—ñ–≤
            clubs_list = ", ".join([enrollment.club.name for enrollment in student.enrollments])
            
            students_data.append({
                # === –û–°–ù–û–í–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–ü—Ä—ñ–∑–≤–∏—â–µ": student.last_name,
                "–Ü–º'—è": student.first_name,
                "–î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è": student.birth_date.strftime("%d.%m.%Y") if student.birth_date else "‚Äî",
                "–í—ñ–∫": student.age or "‚Äî",
                "–ö–ª–∞—Å": student.grade or "‚Äî",
                
                # === –ö–û–ù–¢–ê–ö–¢–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–¢–µ–ª–µ—Ñ–æ–Ω –¥–∏—Ç–∏–Ω–∏": student.phone_child or "‚Äî",
                "–¢–µ–ª–µ—Ñ–æ–Ω –º–∞—Ç–µ—Ä—ñ": student.phone_mother or "‚Äî",
                "–¢–µ–ª–µ—Ñ–æ–Ω –±–∞—Ç—å–∫–∞": student.phone_father or "‚Äî",
                
                # === –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø –ü–†–û –ë–ê–¢–¨–ö–Ü–í ===
                "–ü–Ü–ë –±–∞—Ç—å–∫—ñ–≤": student.parent_name or "‚Äî",
                "–Ü–º'—è –±–∞—Ç—å–∫–∞": student.father_name or "‚Äî",
                "–Ü–º'—è –º–∞—Ç–µ—Ä—ñ": student.mother_name or "‚Äî",
                
                # === –ê–î–†–ï–°–ê ===
                "–¢–∏–ø –Ω–∞—Å–µ–ª–µ–Ω–æ–≥–æ –ø—É–Ω–∫—Ç—É": student.settlement_type or "‚Äî",
                "–ú—ñ—Å—Ü–µ –ø—Ä–æ–∂–∏–≤–∞–Ω–Ω—è": student.location or "‚Äî",
                "–ü–æ–≤–Ω–∞ –∞–¥—Ä–µ—Å–∞": student.address or "‚Äî",
                
                # === –ü–Ü–õ–¨–ì–ò ===
                "–ú–∞–ª–æ–∑–∞–±–µ–∑–ø–µ—á–µ–Ω—ñ": "–¢–∞–∫" if student.benefit_low_income else "–ù—ñ",
                "–ë–∞–≥–∞—Ç–æ–¥—ñ—Ç–Ω—ñ": "–¢–∞–∫" if student.benefit_large_family else "–ù—ñ",
                "–°—ñ–º'—è –ó–°–£": "–¢–∞–∫" if student.benefit_military_family else "–ù—ñ",
                "–í–ü–û": "–¢–∞–∫" if student.benefit_internally_displaced else "–ù—ñ",
                "–°–∏—Ä–æ—Ç–∞/–ø—ñ–¥ –æ–ø—ñ–∫–æ—é": "–¢–∞–∫" if student.benefit_orphan else "–ù—ñ",
                "–î–∏—Ç–∏–Ω–∞ –∑ —ñ–Ω–≤–∞–ª—ñ–¥–Ω—ñ—Å—Ç—é": "–¢–∞–∫" if student.benefit_disability else "–ù—ñ",
                "–°–æ—Ü—ñ–∞–ª—å–Ω–∏–π —Ä–∏–∑–∏–∫": "–¢–∞–∫" if student.benefit_social_risk else "–ù—ñ",
                "–Ü–Ω—à—ñ –ø—ñ–ª—å–≥–∏": student.benefit_other or "‚Äî",
                
                # === –ù–ê–í–ß–ê–ù–ù–Ø ===
                "–ì—É—Ä—Ç–∫–∏": clubs_list or "‚Äî",
                "–í—Å—å–æ–≥–æ –∑–∞–Ω—è—Ç—å": total_attendance,
                "–ü—Ä–∏—Å—É—Ç–Ω—ñ–π": present_count,
                "–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ": f"{attendance_rate:.1f}%",
                
                # === –°–ò–°–¢–ï–ú–ù–ê –Ü–ù–§–û–†–ú–ê–¶–Ü–Ø ===
                "–î–∞—Ç–∞ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—ó": student.created_at.strftime("%d.%m.%Y %H:%M") if student.created_at else "‚Äî"
            })
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ DataFrame
        df = pd.DataFrame(students_data)
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ Excel —Ñ–∞–π–ª –≤ –ø–∞–º'—è—Ç—ñ
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            df.to_excel(writer, sheet_name='–£—á–Ω—ñ - –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è', index=False)
            
            # –ù–∞–ª–∞—à—Ç–æ–≤—É—î–º–æ —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            worksheet = writer.sheets['–£—á–Ω—ñ - –ü–æ–≤–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è']
            for column in worksheet.columns:
                max_length = 0
                column_letter = column[0].column_letter
                for cell in column:
                    try:
                        if len(str(cell.value)) > max_length:
                            max_length = len(str(cell.value))
                    except:
                        pass
                adjusted_width = min(max_length + 2, 50)
                worksheet.column_dimensions[column_letter].width = adjusted_width
            
            # –î–æ–¥–∞—î–º–æ –ª–∏—Å—Ç –∑—ñ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é
            summary_data = {
                '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞': [
                    '–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å —É—á–Ω—ñ–≤',
                    '–£—á–Ω—ñ –∑ –ø—ñ–ª—å–≥–∞–º–∏',
                    '–£—á–Ω—ñ –±–µ–∑ –ø—ñ–ª—å–≥', 
                    '–£—á–Ω—ñ –∑ —Ç–µ–ª–µ—Ñ–æ–Ω–∞–º–∏',
                    '–£—á–Ω—ñ –≤ –≥—É—Ä—Ç–∫–∞—Ö',
                    '–°–µ—Ä–µ–¥–Ω—ñ–π –≤—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ'
                ],
                '–ó–Ω–∞—á–µ–Ω–Ω—è': [
                    len(students),
                    len([s for s in students if any([
                        s.benefit_low_income, s.benefit_large_family, s.benefit_military_family,
                        s.benefit_internally_displaced, s.benefit_orphan, s.benefit_disability,
                        s.benefit_social_risk, s.benefit_other
                    ])]),
                    len([s for s in students if not any([
                        s.benefit_low_income, s.benefit_large_family, s.benefit_military_family,
                        s.benefit_internally_displaced, s.benefit_orphan, s.benefit_disability,
                        s.benefit_social_risk, s.benefit_other
                    ])]),
                    len([s for s in students if s.phone_child]),
                    len([s for s in students if s.enrollments]),
                    f"{sum(float(data['–í—ñ–¥—Å–æ—Ç–æ–∫ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ'].rstrip('%')) for data in students_data) / len(students_data):.1f}%" if students_data else "0%"
                ]
            }
            summary_df = pd.DataFrame(summary_data)
            summary_df.to_excel(writer, sheet_name='–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', index=False)
        
        output.seek(0)
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ —ñ–º'—è —Ñ–∞–π–ª—É –∑ –ø–æ—Ç–æ—á–Ω–æ—é –¥–∞—Ç–æ—é
        today = datetime.now().strftime('%Y-%m-%d')
        filename = f"students_full_export_{today}.xlsx"
        
        return StreamingResponse(
            io.BytesIO(output.read()),
            media_type="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
            headers={"Content-Disposition": f"attachment; filename={filename}"}
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=status.HTTP_500_INTERNAL_SERVER_ERROR,
            detail=f"Error exporting students: {str(e)}"
        )
