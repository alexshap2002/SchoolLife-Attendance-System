"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""

import logging
import asyncio
from datetime import datetime, date, time, timedelta
from typing import List, Dict, Any, Optional
import json

from sqlalchemy import select, func, case, Float
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import AsyncSessionLocal
from app.models import (
    AdminAutomation, AutomationLog, Student, Teacher, Club, 
    Schedule, Attendance, ConductedLesson, PayRate, Payroll, LessonEvent
)

logger = logging.getLogger(__name__)


class AutomationService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π."""
    
    def __init__(self):
        self.telegram_service = None  # –ë—É–¥–µ–º–æ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –ø—ñ–∑–Ω—ñ—à–µ
    
    async def execute_automation(
        self, 
        automation: AdminAutomation, 
        db: AsyncSession
    ) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é."""
        
        start_time = datetime.now()
        
        try:
            # –í–∏–∫–æ–Ω—É—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –≤ –∑–∞–ª–µ–∂–Ω–æ—Å—Ç—ñ –≤—ñ–¥ —Ç–∏–ø—É
            if automation.automation_type == "BIRTHDAYS":
                result = await self._execute_birthdays(automation, db)
            elif automation.automation_type == "LESSON_REMINDER_30":
                result = await self._execute_lesson_reminder(automation, db, 30)
            elif automation.automation_type == "LESSON_REMINDER_10":
                result = await self._execute_lesson_reminder(automation, db, 10)
            elif automation.automation_type == "DAILY_REPORT":
                result = await self._execute_daily_report(automation, db)
            elif automation.automation_type == "WEEKLY_ATTENDANCE":
                result = await self._execute_weekly_attendance(automation, db)
            elif automation.automation_type == "LOW_ATTENDANCE_ALERT":
                result = await self._execute_low_attendance_alert(automation, db)
            elif automation.automation_type == "MISSING_ATTENDANCE":
                result = await self._execute_missing_attendance(automation, db)
            elif automation.automation_type == "PAYROLL_REMINDER":
                result = await self._execute_payroll_reminder(automation, db)
            else:
                # –î–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –ø–æ–≤–µ—Ä—Ç–∞—î–º–æ –±–∞–∑–æ–≤—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
                result = await self._execute_basic_automation(automation, db)
            
            # –û–Ω–æ–≤–ª—é—î–º–æ —á–∞—Å –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è
            automation.last_triggered = datetime.now()
            await db.commit()
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –ª–æ–≥ —É—Å–ø—ñ—Ö—É
            execution_time = int((datetime.now() - start_time).total_seconds() * 1000)
            await self._log_execution(automation.id, "SUCCESS", result["message"], db, execution_time, result.get("metrics", {}))
            
            return result
        
        except Exception as e:
            logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó {automation.id}: {e}")
            
            # –ó–∞–ø–∏—Å—É—î–º–æ –ª–æ–≥ –ø–æ–º–∏–ª–∫–∏
            execution_time = int((datetime.now() - start_time).total_seconds() * 1000)
            await self._log_execution(automation.id, "ERROR", f"–ü–æ–º–∏–ª–∫–∞: {str(e)}", db, execution_time, error_details=str(e))
            
            raise e

    async def _execute_birthdays(self, automation: AdminAutomation, db: AsyncSession) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—é –¥–Ω—ñ–≤ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è."""
        
        today = date.today()
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ
        result = await db.execute(
            select(Student)
            .where(
                    func.extract('month', Student.birth_date) == today.month,
                func.extract('day', Student.birth_date) == today.day
            )
        )
        birthday_students = result.scalars().all()
        
        # üö´ –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –°–ü–ê–ú: —è–∫—â–æ –Ω–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –î–ù
        if not birthday_students:
            return {
                "message": "üéÇ –ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –¥–Ω–µ–º –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ)",
                "metrics": {"students_count": 0}
            }
        
        # ‚úÖ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –∫–æ–ª–∏ —î —Å—Ç—É–¥–µ–Ω—Ç–∏ –∑ –î–ù
        message = f"üéÇ <b>–î–Ω—ñ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è —Å—å–æ–≥–æ–¥–Ω—ñ</b>\n\n"
        message += f"üéâ –£ {len(birthday_students)} –¥—ñ—Ç–µ–π –¥–µ–Ω—å –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:\n\n"
        
        for student in birthday_students:
            age = today.year - student.birth_date.year if student.birth_date else "?"
            message += f"üéà <b>{student.first_name} {student.last_name}</b> ({age} —Ä–æ–∫—ñ–≤)\n"
        
        message += "\nüéÅ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–∏–≤—ñ—Ç–∞—Ç–∏ —ñ–º–µ–Ω–∏–Ω–Ω–∏–∫—ñ–≤!"
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ Telegram
        await self._send_telegram_message(automation.admin_chat_id, message)
        
        return {
            "message": message,
            "metrics": {"students_count": len(birthday_students)}
        }

    async def _execute_lesson_reminder(self, automation: AdminAutomation, db: AsyncSession, minutes: int) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —É—Ä–æ–∫."""
        
        now = datetime.now()
        current_weekday = now.weekday() + 1  # SQLAlchemy –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î 1-7
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —É—Ä–æ–∫–∏, —è–∫—ñ –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è —á–µ—Ä–µ–∑ –≤–∫–∞–∑–∞–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å —Ö–≤–∏–ª–∏–Ω
        target_time = (now + timedelta(minutes=minutes)).time()
        
        # –î—ñ–∞–ø–∞–∑–æ–Ω ¬±2 —Ö–≤–∏–ª–∏–Ω–∏ –¥–ª—è —Ç–æ—á–Ω–æ—Å—Ç—ñ
        time_start = (now + timedelta(minutes=minutes-2)).time()
        time_end = (now + timedelta(minutes=minutes+2)).time()
        
        result = await db.execute(
            select(Schedule, Club, Teacher)
            .join(Club, Schedule.club_id == Club.id)
            .join(Teacher, Schedule.teacher_id == Teacher.id)
            .where(
                Schedule.weekday == current_weekday,
                Schedule.active == True,
                Schedule.start_time >= time_start,
                Schedule.start_time <= time_end
            )
        )
        upcoming_lessons = result.all()
        
        # üö´ –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –°–ü–ê–ú: —è–∫—â–æ –Ω–µ–º–∞—î —É—Ä–æ–∫—ñ–≤
        if not upcoming_lessons:
            return {
                "message": f"–ù–µ–º–∞—î —É—Ä–æ–∫—ñ–≤ —á–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ)",
                "metrics": {"lessons_count": 0}
            }
        
        # ‚úÖ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –¢–Ü–õ–¨–ö–ò –∫–æ–ª–∏ —î —É—Ä–æ–∫–∏
        message = f"üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —É—Ä–æ–∫–∏</b>\n\n"
        message += f"‚è∞ –ß–µ—Ä–µ–∑ {minutes} —Ö–≤–∏–ª–∏–Ω –ø–æ—á–∏–Ω–∞—é—Ç—å—Å—è {len(upcoming_lessons)} —É—Ä–æ–∫—ñ–≤:\n\n"
        
        for schedule, club, teacher in upcoming_lessons:
            lesson_time = schedule.start_time.strftime("%H:%M")
            message += f"üìö <b>{club.name}</b> –æ {lesson_time}\n"
            message += f"üë®‚Äçüè´ –í—á–∏—Ç–µ–ª—å: {teacher.full_name}\n\n"
        
        message += "‚ö° –ü—ñ–¥–≥–æ—Ç—É–π—Ç–µ—Å—è –¥–æ —É—Ä–æ–∫—ñ–≤!"
        
        await self._send_telegram_message(automation.admin_chat_id, message)
        
        return {
            "message": message,
            "metrics": {"lessons_count": len(upcoming_lessons)}
        }

    async def _execute_daily_report(self, automation: AdminAutomation, db: AsyncSession) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ —â–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç."""
        
        today = date.today()
        
        # –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ lesson events –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        planned_result = await db.execute(
            select(func.count(LessonEvent.id))
            .where(func.date(LessonEvent.start_at) == today)
        )
        planned_count = planned_result.scalar() or 0
        
        # –ü—Ä–æ–≤–µ–¥–µ–Ω—ñ —É—Ä–æ–∫–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
        conducted_result = await db.execute(
            select(func.count(ConductedLesson.id))
            .where(func.date(ConductedLesson.lesson_date) == today)
        )
        conducted_count = conducted_result.scalar() or 0
        
        # –ó–∞–≥–∞–ª—å–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å –∑–∞ —Å—å–æ–≥–æ–¥–Ω—ñ
        total_attendance_result = await db.execute(
            select(func.count(Attendance.id))
            .join(LessonEvent)
            .where(func.date(LessonEvent.start_at) == today)
        )
        total_attendance = total_attendance_result.scalar() or 0
        
        # –ü—Ä–∏—Å—É—Ç–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
        present_result = await db.execute(
            select(func.count(Attendance.id))
            .join(LessonEvent)
            .where(
                func.date(LessonEvent.start_at) == today,
                Attendance.status == "PRESENT"
            )
        )
        present_count = present_result.scalar() or 0
        
        # –†–æ–∑—Ä–∞—Ö—É–Ω–æ–∫ –≤—ñ–¥—Å–æ—Ç–∫–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ
        attendance_rate = (present_count / total_attendance * 100) if total_attendance > 0 else 0
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = f"üìä <b>–©–æ–¥–µ–Ω–Ω–∏–π –∑–≤—ñ—Ç –∑–∞ {today.strftime('%d.%m.%Y')}</b>\n\n"
        message += f"üìö <b>–£—Ä–æ–∫–∏:</b>\n"
        message += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ: {planned_count}\n"
        message += f"‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {conducted_count}\n\n"
        
        message += f"üë• <b>–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å:</b>\n"
        message += f"‚Ä¢ –í—Å—å–æ–≥–æ –≤—ñ–¥–º—ñ—Ç–æ–∫: {total_attendance}\n"
        message += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç–Ω—ñ—Ö: {present_count}\n"
        message += f"‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ: {attendance_rate:.1f}%\n\n"
        
        # –û—Ü—ñ–Ω–∫–∞ –¥–Ω—è
        if attendance_rate >= 80:
            day_rating = "üü¢ –í—ñ–¥–º—ñ–Ω–Ω–æ"
        elif attendance_rate >= 60:
            day_rating = "üü° –î–æ–±—Ä–µ"
        else:
            day_rating = "üî¥ –ü–æ—Ç—Ä–µ–±—É—î —É–≤–∞–≥–∏"
        
        message += f"üìà <b>–ó–∞–≥–∞–ª—å–Ω–∞ –æ—Ü—ñ–Ω–∫–∞ –¥–Ω—è:</b> {day_rating}"
        
        await self._send_telegram_message(automation.admin_chat_id, message)
        
        return {
            "message": message,
            "metrics": {
                "planned_lessons": planned_count,
                "conducted_lessons": conducted_count,
                "attendance_rate": attendance_rate,
                "total_attendance": total_attendance,
                "present_count": present_count
            }
        }

    async def _execute_weekly_attendance(self, automation: AdminAutomation, db: AsyncSession) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ —Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ."""
        
        today = date.today()
        week_start = today - timedelta(days=today.weekday())
        week_end = week_start + timedelta(days=6)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
        total_lessons_result = await db.execute(
            select(func.count(LessonEvent.id))
            .where(
                func.date(LessonEvent.start_at) >= week_start,
                func.date(LessonEvent.start_at) <= week_end
            )
        )
        total_lessons = total_lessons_result.scalar() or 0
        
        conducted_lessons_result = await db.execute(
            select(func.count(ConductedLesson.id))
            .where(
                func.date(ConductedLesson.lesson_date) >= week_start,
                func.date(ConductedLesson.lesson_date) <= week_end
            )
        )
        conducted_lessons = conducted_lessons_result.scalar() or 0
        
        # –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å –∑–∞ —Ç–∏–∂–¥–µ–Ω—å
        total_attendance_result = await db.execute(
            select(func.count(Attendance.id))
            .join(LessonEvent)
            .where(
                func.date(LessonEvent.start_at) >= week_start,
                func.date(LessonEvent.start_at) <= week_end
            )
        )
        total_attendance = total_attendance_result.scalar() or 0
        
        present_result = await db.execute(
            select(func.count(Attendance.id))
            .join(LessonEvent)
            .where(
                func.date(LessonEvent.start_at) >= week_start,
                func.date(LessonEvent.start_at) <= week_end,
                Attendance.status == "PRESENT"
            )
        )
        present_count = present_result.scalar() or 0
        
        attendance_rate = (present_count / total_attendance * 100) if total_attendance > 0 else 0
        
        # –¢–û–ü 3 –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç–∞
        top_students_result = await db.execute(
            select(
                Student.first_name,
                Student.last_name,
                func.count(Attendance.id).label('total_classes'),
                func.sum(case((Attendance.status == "PRESENT", 1), else_=0)).label('attended')
            )
            .join(Attendance)
            .join(LessonEvent)
            .where(
                func.date(LessonEvent.start_at) >= week_start,
                func.date(LessonEvent.start_at) <= week_end
            )
            .group_by(Student.id, Student.first_name, Student.last_name)
            .having(func.count(Attendance.id) > 0)
            .order_by(func.sum(case((Attendance.status == "PRESENT", 1), else_=0)).desc())
            .limit(3)
        )
        top_students = top_students_result.fetchall()
        
        # –§–æ—Ä–º—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        message = f"üìà <b>–¢–∏–∂–Ω–µ–≤–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å</b>\n"
        message += f"<i>{week_start.strftime('%d.%m')} - {week_end.strftime('%d.%m.%Y')}</i>\n\n"
        
        message += f"üìö <b>–£—Ä–æ–∫–∏ –∑–∞ —Ç–∏–∂–¥–µ–Ω—å:</b>\n"
        message += f"‚Ä¢ –ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω–æ: {total_lessons}\n"
        message += f"‚Ä¢ –ü—Ä–æ–≤–µ–¥–µ–Ω–æ: {conducted_lessons}\n\n"
        
        message += f"üë• <b>–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å:</b>\n"
        message += f"‚Ä¢ –í—Å—å–æ–≥–æ –≤—ñ–¥–º—ñ—Ç–æ–∫: {total_attendance}\n"
        message += f"‚Ä¢ –ü—Ä–∏—Å—É—Ç–Ω—ñ—Ö: {present_count}\n"
        message += f"‚Ä¢ –í—ñ–¥—Å–æ—Ç–æ–∫ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ: {attendance_rate:.1f}%\n\n"
        
        if top_students:
            message += f"üèÜ <b>–¢–û–ü –∞–∫—Ç–∏–≤–Ω–∏—Ö —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤:</b>\n"
            for i, student in enumerate(top_students, 1):
                student_rate = (student.attended / student.total_classes * 100) if student.total_classes > 0 else 0
                message += f"{i}. {student.first_name} {student.last_name}: {student_rate:.1f}% ({student.attended}/{student.total_classes})\n"
        
        await self._send_telegram_message(automation.admin_chat_id, message)
        
        return {
            "message": message,
            "metrics": {
                "total_lessons": total_lessons,
                "conducted_lessons": conducted_lessons,
                "attendance_rate": attendance_rate,
                "top_students_count": len(top_students)
            }
        }

    async def _execute_low_attendance_alert(self, automation: AdminAutomation, db: AsyncSession) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –ø–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ –Ω–∏–∑—å–∫—É –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å."""
        
        # –ê–Ω–∞–ª—ñ–∑—É—î–º–æ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
        week_ago = date.today() - timedelta(days=7)
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ –Ω–∏–∑—å–∫–æ—é –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—é (< 60%)
        result = await db.execute(
            select(
                Student.id,
                Student.first_name,
                Student.last_name,
                func.count(Attendance.id).label('total_classes'),
                func.sum(
                    case(
                        (Attendance.status == "PRESENT", 1),
                        else_=0
                    )
                ).label('attended_classes')
            )
            .join(Attendance)
            .join(LessonEvent)
            .where(func.date(LessonEvent.start_at) >= week_ago)
            .group_by(Student.id, Student.first_name, Student.last_name)
            .having(
                func.cast(
                    func.sum(case((Attendance.status == "PRESENT", 1), else_=0)), 
                    Float
                ) / func.count(Attendance.id) < 0.6  # –ú–µ–Ω—à–µ 60%
            )
        )
        
        low_attendance_students = result.fetchall()
        
        if not low_attendance_students:
            message = "‚úÖ <b>–í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å –≤ –Ω–æ—Ä–º—ñ</b>\n\n–í—Å—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ –º–∞—é—Ç—å –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å –≤–∏—â–µ 60% –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å."
            alert_count = 0
        else:
            message = "‚ö†Ô∏è <b>–°—Ç—É–¥–µ–Ω—Ç–∏ –∑ –Ω–∏–∑—å–∫–æ—é –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—é</b>\n\n"
            message += f"<i>–ú–µ–Ω—à–µ 60% –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å:</i>\n\n"
            
            for student in low_attendance_students:
                attendance_rate = (student.attended_classes / student.total_classes * 100) if student.total_classes > 0 else 0
                message += f"üî¥ {student.first_name} {student.last_name}: {attendance_rate:.1f}% ({student.attended_classes}/{student.total_classes})\n"
            
            alert_count = len(low_attendance_students)

        await self._send_telegram_message(automation.admin_chat_id, message)

        return {
            "message": message,
            "metrics": {"alert_students": alert_count}
        }

    async def _execute_missing_attendance(self, automation: AdminAutomation, db: AsyncSession) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–æ—ó –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ."""
        
        # –°–ø—Ä–æ—â–µ–Ω–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞: –∑–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ lesson_events –±–µ–∑ attendance
        result = await db.execute(
            select(func.count(LessonEvent.id))
            .outerjoin(Attendance, LessonEvent.id == Attendance.lesson_event_id)
            .where(Attendance.id.is_(None))
        )
        missing_count = result.scalar() or 0
        
        # üö´ –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –°–ü–ê–ú: —è–∫—â–æ –≤—Å–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–æ
        if missing_count == 0:
            return {
                "message": "‚úÖ –í—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å –∑–∞–ø–æ–≤–Ω–µ–Ω–∞ –¥–ª—è –≤—Å—ñ—Ö —É—Ä–æ–∫—ñ–≤ (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ)",
                "metrics": {"missing_lessons": 0}
            }
        
        # ‚úÖ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –∫–æ–ª–∏ —î –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω—ñ —É—Ä–æ–∫–∏
        message = f"‚ùå <b>–ù–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–∞ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω—ñ—Å—Ç—å</b>\n\n"
        message += f"‚ö†Ô∏è –ó–Ω–∞–π–¥–µ–Ω–æ {missing_count} —É—Ä–æ–∫—ñ–≤ –±–µ–∑ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ\n\n"
        message += "üéØ –ü–µ—Ä–µ–π–¥—ñ—Ç—å –¥–æ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è: /admin/attendance"
        
        await self._send_telegram_message(automation.admin_chat_id, message)
        
        return {
            "message": message,
            "metrics": {"missing_lessons": missing_count}
        }

    async def _execute_payroll_reminder(self, automation: AdminAutomation, db: AsyncSession) -> Dict[str, Any]:
        """–í–∏–∫–æ–Ω–∞—Ç–∏ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç–∏."""
        
        # –ó–Ω–∞—Ö–æ–¥–∏–º–æ conducted_lessons –±–µ–∑ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ—ó –∑–∞—Ä–ø–ª–∞—Ç–∏
        result = await db.execute(
            select(ConductedLesson, Teacher, Club)
            .join(Teacher, ConductedLesson.teacher_id == Teacher.id)
            .join(Club, ConductedLesson.club_id == Club.id)
            .where(ConductedLesson.is_salary_calculated == False)
            .order_by(Teacher.full_name, ConductedLesson.lesson_date)
        )
        unpaid_lessons = result.all()
        
        # üö´ –ù–ï –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –°–ü–ê–ú: —è–∫—â–æ –≤—Å–µ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–æ
        if not unpaid_lessons:
            return {
                "message": "‚úÖ –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–∞—Ä–∞—Ö–æ–≤–∞–Ω–∞ –∑–∞ –≤—Å—ñ –ø—Ä–æ–≤–µ–¥–µ–Ω—ñ —É—Ä–æ–∫–∏ (–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ù–ï –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ)",
                "metrics": {"unpaid_lessons": 0}
            }
        
        # –ì—Ä—É–ø—É—î–º–æ –ø–æ –≤—á–∏—Ç–µ–ª—è—Ö
        teachers_summary = {}
        for lesson, teacher, club in unpaid_lessons:
            teacher_name = teacher.full_name
            if teacher_name not in teachers_summary:
                teachers_summary[teacher_name] = {
                    "lessons": 0,
                    "clubs": set(),
                    "amount": 0
                }
            
            teachers_summary[teacher_name]["lessons"] += 1
            teachers_summary[teacher_name]["clubs"].add(club.name)
            # –£–º–æ–≤–Ω–∏–π —Ä–æ–∑—Ä–∞—Ö—É–Ω–æ–∫: 200 –≥—Ä–Ω –∑–∞ —É—Ä–æ–∫ (–º–æ–∂–Ω–∞ –∑—Ä–æ–±–∏—Ç–∏ —Ç–æ—á–Ω—ñ—à–µ)
            teachers_summary[teacher_name]["amount"] += 200
        
        # ‚úÖ –í–Ü–î–ü–†–ê–í–õ–Ø–Ñ–ú–û –¢–Ü–õ–¨–ö–ò –∫–æ–ª–∏ —î –Ω–µ–∑–∞—Ä–∞—Ö–æ–≤–∞–Ω—ñ —É—Ä–æ–∫–∏
        message = f"üí∞ <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç–∏</b>\n\n"
        message += f"üìù –ù–µ–æ–±—Ö—ñ–¥–Ω–æ –Ω–∞—Ä–∞—Ö—É–≤–∞—Ç–∏ –∑–∞—Ä–ø–ª–∞—Ç—É –∑–∞ {len(unpaid_lessons)} —É—Ä–æ–∫—ñ–≤:\n\n"
        
        total_amount = 0
        for teacher_name, data in teachers_summary.items():
            clubs_list = ", ".join(list(data["clubs"])[:2])  # –ú–∞–∫—Å–∏–º—É–º 2 –≥—É—Ä—Ç–∫–∏
            if len(data["clubs"]) > 2:
                clubs_list += "..."
                
            message += f"üë®‚Äçüè´ <b>{teacher_name}</b>\n"
            message += f"   üìö {data['lessons']} —É—Ä–æ–∫—ñ–≤ ({clubs_list})\n"
            message += f"   üíµ ~{data['amount']} –≥—Ä–Ω\n\n"
            
            total_amount += data["amount"]
        
        message += f"üíº <b>–ó–∞–≥–∞–ª–æ–º:</b> {len(unpaid_lessons)} —É—Ä–æ–∫—ñ–≤, ~{total_amount} –≥—Ä–Ω\n\n"
        message += "üéØ –®–≤–∏–¥–∫–µ –Ω–∞—Ä–∞—Ö—É–≤–∞–Ω–Ω—è: /admin/payroll"
        
        await self._send_telegram_message(automation.admin_chat_id, message)
        
        return {
            "message": message,
            "metrics": {
                "unpaid_lessons": len(unpaid_lessons),
                "teachers_count": len(teachers_summary),
                "estimated_amount": total_amount
            }
        }

    async def _execute_basic_automation(self, automation: AdminAutomation, db: AsyncSession) -> Dict[str, Any]:
        """–ë–∞–∑–æ–≤–µ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –¥–ª—è —ñ–Ω—à–∏—Ö —Ç–∏–ø—ñ–≤ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π."""
        
        automation_names = {
            "MISSING_ATTENDANCE": "‚ùå –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–µ–∑–∞–ø–æ–≤–Ω–µ–Ω–æ—ó –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–æ—Å—Ç—ñ",
            "TEACHER_WORKLOAD": "üë®‚Äçüè´ –ó–≤—ñ—Ç –ø—Ä–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –≤—á–∏—Ç–µ–ª—ñ–≤",
            "STUDENT_PROGRESS": "üìö –ó–≤—ñ—Ç –ø—Ä–æ –ø—Ä–æ–≥—Ä–µ—Å —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤",
            "PAYROLL_REMINDER": "üí∞ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–∞—Ä–ø–ª–∞—Ç–∏",
            "EQUIPMENT_CHECK": "üîß –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –æ–±–ª–∞–¥–Ω–∞–Ω–Ω—è",
            "PARENT_NOTIFICATIONS": "üë™ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –∑–≤'—è–∑–æ–∫ –∑ –±–∞—Ç—å–∫–∞–º–∏",
            "HOLIDAY_REMINDERS": "üéâ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Å–≤—è—Ç–∞",
            "BACKUP_REMINDER": "üíæ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ —Ä–µ–∑–µ—Ä–≤–Ω—ñ –∫–æ–ø—ñ—ó",
            "SYSTEM_HEALTH": "üè• –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å—Ç–∞–Ω—É —Å–∏—Å—Ç–µ–º–∏"
        }
        
        automation_name = automation_names.get(automation.automation_type, automation.automation_type)
        message = f"{automation_name}\n\n–ê–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—è –≤–∏–∫–æ–Ω–∞–Ω–∞ —É—Å–ø—ñ—à–Ω–æ!"
        
        await self._send_telegram_message(automation.admin_chat_id, message)
        
        return {
            "message": message,
            "metrics": {}
        }

    async def _send_telegram_message(self, chat_id: int, message: str):
        """–í—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ Telegram."""
        
        try:
            from aiogram import Bot
            from app.core.settings import settings
            
            bot = Bot(token=settings.telegram_bot_token)
            await bot.send_message(
                chat_id=chat_id, 
                text=message, 
                parse_mode='HTML'
            )
            await bot.session.close()
            
            logger.info(f"‚úÖ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Telegram chat {chat_id}")
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –≤ Telegram chat {chat_id}: {e}")
            # Fallback - –ª–æ–≥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            logger.info(f"üì± Telegram message for {chat_id}: {message}")

    async def _log_execution(
        self, 
        automation_id: int, 
        status: str, 
        message: str, 
        db: AsyncSession,
        execution_time_ms: int = 0,
        metrics: Dict[str, Any] = None,
        error_details: str = None
    ):
        """–ó–∞–ø–∏—Å–∞—Ç–∏ –ª–æ–≥ –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó."""
        
        log_entry = AutomationLog(
            automation_id=automation_id,
            status=status,
            message=message,
            error_details=error_details,
            execution_time_ms=execution_time_ms,
            students_count=metrics.get("students_count") if metrics else None,
            clubs_count=metrics.get("clubs_count") if metrics else None
        )
        
        db.add(log_entry)
        await db.commit()


# –ì–ª–æ–±–∞–ª—å–Ω–∏–π –µ–∫–∑–µ–º–ø–ª—è—Ä —Å–µ—Ä–≤—ñ—Å—É
automation_service = AutomationService()