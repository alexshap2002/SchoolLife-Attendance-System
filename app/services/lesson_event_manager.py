"""
üéØ –ú–µ–Ω–µ–¥–∂–µ—Ä Lesson Events - –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º
"""

import logging
from datetime import datetime, date, time, timedelta
from typing import Optional, List

from sqlalchemy import select, update, and_
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from app.core.database import AsyncSessionLocal
from app.models.lesson_event import LessonEvent, LessonEventStatus
from app.models.schedule import Schedule
from app.models.bot_schedule import BotSchedule
from app.models.teacher import Teacher
from app.utils.timezone import (
    next_n_weekly, now_utc, parse_time_string, 
    combine_date_time_to_utc, KYIV, to_utc
)

logger = logging.getLogger(__name__)

class LessonEventManager:
    """–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∂–∏—Ç—Ç—î–≤–∏–º —Ü–∏–∫–ª–æ–º lesson events."""
    
    def __init__(self, db: AsyncSession):
        self.db = db
    
    async def ensure_planned_lesson_event(self, schedule_id: int, target_date: date) -> Optional[LessonEvent]:
        """
        –ó–∞–±–µ–∑–ø–µ—á—É—î –Ω–∞—è–≤–Ω—ñ—Å—Ç—å PLANNED lesson event –¥–ª—è –≤–∫–∞–∑–∞–Ω–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É —ñ –¥–∞—Ç–∏.
        
        –õ–æ–≥—ñ–∫–∞:
        1. –Ø–∫—â–æ —î PLANNED - –ø–æ–≤–µ—Ä—Ç–∞—î –π–æ–≥–æ
        2. –Ø–∫—â–æ –Ω–µ–º–∞—î –∂–æ–¥–Ω–æ–≥–æ - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π PLANNED
        3. –Ø–∫—â–æ –≤—Å—ñ COMPLETED/SENT - —Å—Ç–≤–æ—Ä—é—î –Ω–æ–≤–∏–π PLANNED
        """
        
        # –®—É–∫–∞—î–º–æ —ñ—Å–Ω—É—é—á—ñ lesson events –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É —ñ –¥–∞—Ç–∏
        result = await self.db.execute(
            select(LessonEvent)
            .where(
                LessonEvent.schedule_id == schedule_id,
                LessonEvent.date == target_date
            )
        )
        
        existing_events = result.scalars().all()
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —î PLANNED
        planned_events = [e for e in existing_events if e.status == LessonEventStatus.PLANNED]
        
        if planned_events:
            logger.info(f"Found existing PLANNED lesson event {planned_events[0].id} for schedule {schedule_id}")
            return planned_events[0]
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–∞–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥—É
        schedule_result = await self.db.execute(
            select(Schedule).where(Schedule.id == schedule_id)
        )
        
        schedule = schedule_result.scalar_one_or_none()
        if not schedule:
            logger.error(f"Schedule {schedule_id} not found")
            return None
        
        # –û—Ç—Ä–∏–º—É—î–º–æ teacher_chat_id
        teacher_result = await self.db.execute(
            select(Teacher).where(Teacher.id == schedule.teacher_id)
        )
        teacher = teacher_result.scalar_one_or_none()
        teacher_chat_id = teacher.tg_chat_id if teacher and teacher.tg_chat_id else None
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ UTC timestamps
        lesson_time = schedule.start_time
        start_at_utc = combine_date_time_to_utc(target_date, lesson_time)
        
        # notify_at = start_at (–º–æ–∂–Ω–∞ –¥–æ–¥–∞—Ç–∏ offset –ø—ñ–∑–Ω—ñ—à–µ)
        notify_at_utc = start_at_utc
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π PLANNED lesson event
        new_event = LessonEvent(
            schedule_id=schedule_id,
            date=target_date,
            club_id=schedule.club_id,
            teacher_id=schedule.teacher_id,
            status=LessonEventStatus.PLANNED,
            start_at=start_at_utc,
            notify_at=notify_at_utc,
            teacher_chat_id=teacher_chat_id
        )
        
        self.db.add(new_event)
        await self.db.flush()  # –û—Ç—Ä–∏–º—É—î–º–æ ID –±–µ–∑ commit
        
        logger.info(f"Created new PLANNED lesson event {new_event.id} for schedule {schedule_id} on {target_date}")
        
        return new_event
    
    async def auto_generate_daily_events(self, target_date: Optional[date] = None) -> int:
        """
        –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î lesson events –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤.
        
        Args:
            target_date: –î–∞—Ç–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º - —Å—å–æ–≥–æ–¥–Ω—ñ)
            
        Returns:
            –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Å—Ç–≤–æ—Ä–µ–Ω–∏—Ö events
        """
        
        if target_date is None:
            target_date = date.today()
        
        weekday = target_date.isoweekday()  # 1=–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 7=–ù–µ–¥—ñ–ª—è
        
        # –ü—Ä–æ–ø—É—Å–∫–∞—î–º–æ –≤–∏—Ö—ñ–¥–Ω—ñ
        if weekday > 5:
            logger.info(f"Skipping weekend day {target_date}")
            return 0
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏ –¥–ª—è —Ü—å–æ–≥–æ –¥–Ω—è —Ç–∏–∂–Ω—è
        result = await self.db.execute(
            select(Schedule)
            .where(
                Schedule.weekday == weekday,
                Schedule.active == True
            )
        )
        
        schedules = result.scalars().all()
        
        created_count = 0
        
        for schedule in schedules:
            event = await self.ensure_planned_lesson_event(schedule.id, target_date)
            if event and event.id:  # –Ø–∫—â–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ –Ω–æ–≤–∏–π event
                # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —â–æ–π–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–∏–π event
                if event.created_at and (datetime.utcnow() - event.created_at.replace(tzinfo=None)).seconds < 60:
                    created_count += 1
        
        if created_count > 0:
            await self.db.commit()
            logger.info(f"Auto-generated {created_count} lesson events for {target_date}")
        
        return created_count
    
    async def reset_lesson_event_to_planned(self, lesson_event_id: int) -> bool:
        """
        –°–∫–∏–¥–∞—î lesson event –Ω–∞–∑–∞–¥ —É —Å—Ç–∞—Ç—É—Å PLANNED.
        
        –ö–æ—Ä–∏—Å–Ω–æ –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –∞–±–æ –≤–∏–ø—Ä–∞–≤–ª–µ–Ω–Ω—è –ø–æ–º–∏–ª–æ–∫.
        """
        
        try:
            await self.db.execute(
                update(LessonEvent)
                .where(LessonEvent.id == lesson_event_id)
                .values(
                    status=LessonEventStatus.PLANNED,
                    sent_at=None,
                    completed_at=None
                )
            )
            
            await self.db.commit()
            
            logger.info(f"Reset lesson event {lesson_event_id} to PLANNED status")
            return True
            
        except Exception as e:
            logger.error(f"Error resetting lesson event {lesson_event_id}: {e}")
            await self.db.rollback()
            return False
    
    async def ensure_bot_schedule_has_events(self, bot_schedule_id: int) -> bool:
        """
        –ó–∞–±–µ–∑–ø–µ—á—É—î —â–æ –¥–ª—è BotSchedule —î –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ lesson events –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ UTC timestamps.
        
        –í–∏–∫–ª–∏–∫–∞—î—Ç—å—Å—è –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ –Ω–æ–≤–æ–≥–æ BotSchedule —á–µ—Ä–µ–∑ –∞–¥–º—ñ–Ω –ø–∞–Ω–µ–ª—å.
        """
        
        # –û—Ç—Ä–∏–º—É—î–º–æ BotSchedule –∑ —É—Å—ñ–º–∞ –∑–≤'—è–∑–∞–Ω–∏–º–∏ –¥–∞–Ω–∏–º–∏
        result = await self.db.execute(
            select(BotSchedule)
            .options(
                selectinload(BotSchedule.schedule).selectinload(Schedule.teacher)
            )
            .where(BotSchedule.id == bot_schedule_id)
        )
        
        bot_schedule = result.scalar_one_or_none()
        if not bot_schedule:
            logger.error(f"BotSchedule {bot_schedule_id} not found")
            return False
        
        schedule = bot_schedule.schedule
        if not schedule:
            logger.error(f"Schedule not found for BotSchedule {bot_schedule_id}")
            return False
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ UTC timestamps –Ω–∞ –æ—Å–Ω–æ–≤—ñ BotSchedule.custom_time
        notification_time = bot_schedule.custom_time
        
        # –ì–µ–Ω–µ—Ä—É—î–º–æ events –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–∏—Ö 14 –¥–Ω—ñ–≤ (2 —Ç–∏–∂–Ω—ñ), –≤–∫–ª—é—á–∞—é—á–∏ —Å—å–æ–≥–æ–¥–Ω—ñ
        # schedule.weekday: 1=–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 5=–ü'—è—Ç–Ω–∏—Ü—è
        # next_n_weekly –ø–æ—Ç—Ä–µ–±—É—î: 0=–ü–æ–Ω–µ–¥—ñ–ª–æ–∫, 4=–ü'—è—Ç–Ω–∏—Ü—è  
        target_weekday_0based = schedule.weekday - 1
        
        logger.info(f"Schedule {schedule.id} weekday={schedule.weekday} (1-based), converting to {target_weekday_0based} (0-based)")
        
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: –ì–µ–Ω–µ—Ä—É—î–º–æ occurrences –Ω–∞ –æ—Å–Ω–æ–≤—ñ –†–ï–ê–õ–¨–ù–û–ì–û –ß–ê–°–£ –£–†–û–ö–£, –∞ –Ω–µ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        # –¶–µ –≥–∞—Ä–∞–Ω—Ç—É—î —â–æ target_date –±—É–¥–µ –ø—Ä–∞–≤–∏–ª—å–Ω–∞ –Ω–∞–≤—ñ—Ç—å —è–∫—â–æ notification_time —Ä–∞–Ω—ñ—à–µ –∑–∞ start_time
        occurrences = next_n_weekly(
            local_weekday=target_weekday_0based,
            local_hour=schedule.start_time.hour,  # ‚Üê –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –ß–ê–° –£–†–û–ö–£, –∞ –Ω–µ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó!
            local_minute=schedule.start_time.minute,
            n=52,  # 52 —Ç–∏–∂–Ω—ñ = 1 —Ä—ñ–∫ (—â–æ—Ç–∏–∂–Ω–µ–≤–∞ —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü—ñ—è –∑–∞–±–µ–∑–ø–µ—á–∏—Ç—å –ø–æ–∫—Ä–∏—Ç—Ç—è –Ω–∞ —Ä—ñ–∫ –≤–ø–µ—Ä–µ–¥)
            include_today=True  # –í–∫–ª—é—á–∞—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ —è–∫—â–æ —á–∞—Å —â–µ –Ω–µ –ø—Ä–æ–π—à–æ–≤
        )
        
        logger.info(f"Generated {len(occurrences)} occurrences for schedule {schedule.id}, starting from {occurrences[0] if occurrences else 'None'}")
        
        events_created = 0
        
        # ‚úÖ –í–ò–ü–†–ê–í–õ–ï–ù–ù–Ø: occurrences —Ç–µ–ø–µ—Ä –º—ñ—Å—Ç–∏—Ç—å —á–∞—Å –°–¢–ê–†–¢–£ –£–†–û–ö–£, –∞ –Ω–µ –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó
        for start_at_utc in occurrences:
            target_date = start_at_utc.astimezone(KYIV).date()
            
            # –û–±—á–∏—Å–ª—é—î–º–æ —á–∞—Å –Ω–æ—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó (start_at - offset)
            offset_minutes = bot_schedule.offset_minutes or 0
            notify_at_utc = start_at_utc - timedelta(minutes=offset_minutes)
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ –≤–∂–µ —î lesson event –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏ –≤—ñ–¥ —Ü—å–æ–≥–æ bot_schedule
            # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ bot_schedule_id –¥–ª—è —É–Ω—ñ–∫–∞–ª—å–Ω–æ—Å—Ç—ñ
            existing_result = await self.db.execute(
                select(LessonEvent)
                .where(
                    LessonEvent.schedule_id == schedule.id,
                    LessonEvent.date == target_date,
                    LessonEvent.idempotency_key.like(f'bot_schedule_{bot_schedule_id}_%')
                )
                .limit(1)
            )
            
            existing_event = existing_result.scalar_one_or_none()
            
            if existing_event:
                # –û–Ω–æ–≤–ª—é—î–º–æ —ñ—Å–Ω—É—é—á–∏–π event –∑ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–º–∏ UTC timestamps
                await self.db.execute(
                    update(LessonEvent)
                    .where(LessonEvent.id == existing_event.id)
                    .values(
                        start_at=start_at_utc,
                        notify_at=notify_at_utc,
                        teacher_chat_id=bot_schedule.schedule.teacher.tg_chat_id if bot_schedule.schedule.teacher.tg_chat_id else None,
                        status=LessonEventStatus.PLANNED,
                        sent_at=None,
                        completed_at=None,
                        send_attempts=0,
                        last_error=None
                    )
                )
                logger.info(f"Updated existing lesson event {existing_event.id} with notify_at={notify_at_utc}")
            else:
                # –°—Ç–≤–æ—Ä—é—î–º–æ –Ω–æ–≤–∏–π event –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏–º idempotency_key
                idempotency_key = f"bot_schedule_{bot_schedule_id}_{target_date.strftime('%Y%m%d')}"
                new_event = LessonEvent(
                    schedule_id=schedule.id,
                    date=target_date,
                    club_id=schedule.club_id,
                    teacher_id=schedule.teacher_id,
                    status=LessonEventStatus.PLANNED,
                    start_at=start_at_utc,
                    notify_at=notify_at_utc,
                    teacher_chat_id=bot_schedule.schedule.teacher.tg_chat_id if bot_schedule.schedule.teacher.tg_chat_id else None,
                    send_attempts=0,
                    idempotency_key=idempotency_key
                )
                
                self.db.add(new_event)
                events_created += 1
                logger.info(f"Created new lesson event for {target_date} with notify_at={notify_at_utc}")
        
        if events_created > 0:
            await self.db.commit()
            logger.info(f"Created {events_created} new lesson events for BotSchedule {bot_schedule_id}")
        
        return True
    
    async def cleanup_past_lesson_events(self) -> dict:
        """
        –í–∏–¥–∞–ª—è—î —Å—Ç–∞—Ä—ñ PLANNED –ø–æ–¥—ñ—ó (–¥–∞—Ç–∞ < —Å—å–æ–≥–æ–¥–Ω—ñ).
        
        –í–∏–¥–∞–ª—è—î —Ç—ñ–ª—å–∫–∏ –ø–æ–¥—ñ—ó —è–∫—ñ:
        - –ú–∞—é—Ç—å —Å—Ç–∞—Ç—É—Å PLANNED
        - –î–∞—Ç–∞ –≤–∂–µ –º–∏–Ω—É–ª–∞ (date < —Å—å–æ–≥–æ–¥–Ω—ñ)
        - –ù–ï –º–∞—é—Ç—å attendance –∑–∞–ø–∏—Å—ñ–≤
        - –ù–ï –º–∞—é—Ç—å conducted_lessons
        
        Returns:
            dict –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é: deleted_count, checked_count
        """
        from datetime import date as date_type
        from app.models.attendance import Attendance
        from app.models.conducted_lesson import ConductedLesson
        
        today = date_type.today()
        
        logger.info(f"üßπ –ü–æ—á–∞—Ç–æ–∫ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö PLANNED –ø–æ–¥—ñ–π (–¥–∞—Ç–∞ < {today})...")
        
        try:
            # –ó–Ω–∞—Ö–æ–¥–∏–º–æ —Å—Ç–∞—Ä—ñ PLANNED –ø–æ–¥—ñ—ó –±–µ–∑ attendance —Ç–∞ conducted_lessons
            result = await self.db.execute(
                select(LessonEvent)
                .outerjoin(Attendance, Attendance.lesson_event_id == LessonEvent.id)
                .outerjoin(ConductedLesson, ConductedLesson.lesson_event_id == LessonEvent.id)
                .where(
                    and_(
                        LessonEvent.status == LessonEventStatus.PLANNED,
                        LessonEvent.date < today,
                        Attendance.id.is_(None),  # –ù–µ–º–∞—î attendance
                        ConductedLesson.id.is_(None)  # –ù–µ–º–∞—î conducted_lesson
                    )
                )
            )
            
            old_events = result.scalars().all()
            checked_count = len(old_events)
            
            if checked_count == 0:
                logger.info("‚úÖ –ù–µ–º–∞—î —Å—Ç–∞—Ä–∏—Ö PLANNED –ø–æ–¥—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
                return {"deleted_count": 0, "checked_count": 0}
            
            logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {checked_count} —Å—Ç–∞—Ä–∏—Ö PLANNED –ø–æ–¥—ñ–π –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è")
            
            # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ –æ–¥–Ω—ñ–π –¥–ª—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
            deleted_count = 0
            for event in old_events:
                await self.db.delete(event)
                deleted_count += 1
                logger.debug(f"üóëÔ∏è –í–∏–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—É –ø–æ–¥—ñ—é: ID {event.id}, –¥–∞—Ç–∞ {event.date}, schedule {event.schedule_id}")
            
            await self.db.commit()
            
            logger.info(f"‚úÖ –û—á–∏—â–µ–Ω–Ω—è –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –≤–∏–¥–∞–ª–µ–Ω–æ {deleted_count} —Å—Ç–∞—Ä–∏—Ö –ø–æ–¥—ñ–π")
            
            return {"deleted_count": deleted_count, "checked_count": checked_count}
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—á–∏—â–µ–Ω–Ω—è —Å—Ç–∞—Ä–∏—Ö –ø–æ–¥—ñ–π: {e}")
            await self.db.rollback()
            return {"deleted_count": 0, "checked_count": 0, "error": str(e)}
    
    async def cleanup_outdated_future_events(self) -> dict:
        """
        –í–∏–¥–∞–ª—è—î –º–∞–π–±—É—Ç–Ω—ñ PLANNED –ø–æ–¥—ñ—ó –∑ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–º —á–∞—Å–æ–º –ø—ñ—Å–ª—è –∑–º—ñ–Ω–∏ —Ä–æ–∑–∫–ª–∞–¥—É.
        
        –ü–µ—Ä–µ–≤—ñ—Ä—è—î —á–∏ start_at –ø–æ–¥—ñ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—î schedule.start_time.
        –í–∏–¥–∞–ª—è—î —Ç—ñ–ª—å–∫–∏ –º–∞–π–±—É—Ç–Ω—ñ PLANNED –ø–æ–¥—ñ—ó –±–µ–∑ attendance.
        
        Returns:
            dict –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é: deleted_count, checked_count, schedules_checked
        """
        from datetime import date as date_type, timedelta
        from app.models.attendance import Attendance
        
        today = date_type.today()
        
        logger.info(f"üîç –ü–æ—á–∞—Ç–æ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ–¥—ñ–π –Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—ñ—Å—Ç—å —Ä–æ–∑–∫–ª–∞–¥—É...")
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ —Ä–æ–∑–∫–ª–∞–¥–∏
            schedules_result = await self.db.execute(
                select(Schedule).where(Schedule.active == True)
            )
            schedules = schedules_result.scalars().all()
            
            logger.info(f"üìã –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ {len(schedules)} –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ä–æ–∑–∫–ª–∞–¥—ñ–≤")
            
            deleted_count = 0
            checked_count = 0
            schedules_checked = 0
            
            for schedule in schedules:
                schedules_checked += 1
                
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –º–∞–π–±—É—Ç–Ω—ñ PLANNED –ø–æ–¥—ñ—ó –¥–ª—è —Ü—å–æ–≥–æ —Ä–æ–∑–∫–ª–∞–¥—É
                events_result = await self.db.execute(
                    select(LessonEvent)
                    .outerjoin(Attendance, Attendance.lesson_event_id == LessonEvent.id)
                    .where(
                        and_(
                            LessonEvent.schedule_id == schedule.id,
                            LessonEvent.status == LessonEventStatus.PLANNED,
                            LessonEvent.date >= today,
                            Attendance.id.is_(None)  # –ù–µ–º–∞—î attendance
                        )
                    )
                )
                
                events = events_result.scalars().all()
                checked_count += len(events)
                
                for event in events:
                    # –û–±—á–∏—Å–ª—é—î–º–æ –ø—Ä–∞–≤–∏–ª—å–Ω–∏–π start_at –¥–ª—è —Ü—ñ—î—ó –¥–∞—Ç–∏
                    expected_start_at = combine_date_time_to_utc(event.date, schedule.start_time)
                    
                    # –Ø–∫—â–æ —á–∞—Å –Ω–µ –∑–±—ñ–≥–∞—î—Ç—å—Å—è (–±—ñ–ª—å—à–µ –Ω—ñ–∂ –Ω–∞ 1 —Ö–≤–∏–ª–∏–Ω—É —Ä—ñ–∑–Ω–∏—Ü—ñ)
                    time_diff = abs((event.start_at - expected_start_at).total_seconds())
                    
                    if time_diff > 60:  # –ë—ñ–ª—å—à–µ 1 —Ö–≤–∏–ª–∏–Ω–∏ —Ä—ñ–∑–Ω–∏—Ü—ñ
                        logger.info(
                            f"üóëÔ∏è –í–∏–¥–∞–ª—è—é –∑–∞—Å—Ç–∞—Ä—ñ–ª—É –ø–æ–¥—ñ—é: ID {event.id}, schedule {schedule.id}, "
                            f"–¥–∞—Ç–∞ {event.date}, –º–∞—î {event.start_at}, –æ—á—ñ–∫—É—î—Ç—å—Å—è {expected_start_at}"
                        )
                        await self.db.delete(event)
                        deleted_count += 1
            
            await self.db.commit()
            
            logger.info(
                f"‚úÖ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: –ø–µ—Ä–µ–≤—ñ—Ä–µ–Ω–æ {checked_count} –ø–æ–¥—ñ–π –∑ {schedules_checked} —Ä–æ–∑–∫–ª–∞–¥—ñ–≤, "
                f"–≤–∏–¥–∞–ª–µ–Ω–æ {deleted_count} –∑–∞—Å—Ç–∞—Ä—ñ–ª–∏—Ö"
            )
            
            return {
                "deleted_count": deleted_count,
                "checked_count": checked_count,
                "schedules_checked": schedules_checked
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –º–∞–π–±—É—Ç–Ω—ñ—Ö –ø–æ–¥—ñ–π: {e}")
            await self.db.rollback()
            return {"deleted_count": 0, "checked_count": 0, "schedules_checked": 0, "error": str(e)}
    
    async def ensure_events_for_next_365_days(self) -> dict:
        """
        –ì–∞—Ä–∞–Ω—Ç—É—î —â–æ —î –ø–æ–¥—ñ—ó –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω—ñ 365 –¥–Ω—ñ–≤ –¥–ª—è –≤—Å—ñ—Ö –∞–∫—Ç–∏–≤–Ω–∏—Ö bot_schedules.
        
        –õ–æ–≥—ñ–∫–∞:
        1. –ó–Ω–∞—Ö–æ–¥–∏—Ç—å –æ—Å—Ç–∞–Ω–Ω—é –º–∞–π–±—É—Ç–Ω—é –ø–æ–¥—ñ—é –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ bot_schedule
        2. –Ø–∫—â–æ –æ—Å—Ç–∞–Ω–Ω—è –ø–æ–¥—ñ—è < 365 –¥–Ω—ñ–≤ –≤—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ, –≥–µ–Ω–µ—Ä—É—î –¥–æ–¥–∞—Ç–∫–æ–≤—ñ –ø–æ–¥—ñ—ó
        3. –ù–ï –≥–µ–Ω–µ—Ä—É—î –±—ñ–ª—å—à–µ 365 –¥–Ω—ñ–≤ –≤—ñ–¥ —Å—å–æ–≥–æ–¥–Ω—ñ
        
        Returns:
            dict –∑ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ—é: total_bot_schedules, events_created
        """
        from datetime import date as date_type, timedelta
        
        today = date_type.today()
        target_date = today + timedelta(days=365)
        
        logger.info(f"üîÑ –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø–æ–¥—ñ–π –Ω–∞ 365 –¥–Ω—ñ–≤ (–¥–æ {target_date})...")
        
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ bot_schedules
            result = await self.db.execute(
                select(BotSchedule)
                .options(selectinload(BotSchedule.schedule))
                .where(BotSchedule.enabled == True)
            )
            
            bot_schedules = result.scalars().all()
            
            if not bot_schedules:
                logger.warning("‚ö†Ô∏è –ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö bot_schedules")
                return {"total_bot_schedules": 0, "events_created": 0}
            
            logger.info(f"üìã –ó–Ω–∞–π–¥–µ–Ω–æ {len(bot_schedules)} –∞–∫—Ç–∏–≤–Ω–∏—Ö bot_schedules")
            
            total_events_created = 0
            
            for bot_schedule in bot_schedules:
                # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –æ—Å—Ç–∞–Ω–Ω—é –º–∞–π–±—É—Ç–Ω—é –ø–æ–¥—ñ—é
                last_event_result = await self.db.execute(
                    select(LessonEvent)
                    .where(
                        LessonEvent.schedule_id == bot_schedule.schedule_id,
                        LessonEvent.date >= today
                    )
                    .order_by(LessonEvent.date.desc())
                    .limit(1)
                )
                
                last_event = last_event_result.scalar_one_or_none()
                
                if last_event and last_event.date >= target_date:
                    logger.debug(
                        f"‚úÖ BotSchedule {bot_schedule.id}: –≤–∂–µ —î –ø–æ–¥—ñ—ó –¥–æ {last_event.date} "
                        f"(–ø–æ—Ç—Ä—ñ–±–Ω–æ –¥–æ {target_date})"
                    )
                    continue
                
                # –ì–µ–Ω–µ—Ä—É—î–º–æ –ø–æ–¥—ñ—ó –¥–æ target_date
                logger.info(
                    f"üîÑ BotSchedule {bot_schedule.id}: –æ—Å—Ç–∞–Ω—è –ø–æ–¥—ñ—è {last_event.date if last_event else 'None'}, "
                    f"–≥–µ–Ω–µ—Ä—É—î–º–æ –¥–æ {target_date}"
                )
                
                success = await self.ensure_bot_schedule_has_events(bot_schedule.id)
                
                if success:
                    total_events_created += 1
            
            await self.db.commit()
            
            logger.info(f"‚úÖ –ó–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø–æ–¥—ñ–π –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –æ–±—Ä–æ–±–ª–µ–Ω–æ {len(bot_schedules)} bot_schedules")
            
            return {
                "total_bot_schedules": len(bot_schedules),
                "events_created": total_events_created
            }
            
        except Exception as e:
            logger.error(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–±–µ–∑–ø–µ—á–µ–Ω–Ω—è –ø–æ–¥—ñ–π: {e}")
            await self.db.rollback()
            return {"total_bot_schedules": 0, "events_created": 0, "error": str(e)}

# –ì–ª–æ–±–∞–ª—å–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –≤ API
async def ensure_events_for_bot_schedule(bot_schedule_id: int):
    """–ó–∞–±–µ–∑–ø–µ—á—É—î lesson events –¥–ª—è –Ω–æ–≤–æ–≥–æ BotSchedule."""
    async with AsyncSessionLocal() as db:
        manager = LessonEventManager(db)
        return await manager.ensure_bot_schedule_has_events(bot_schedule_id)

async def auto_generate_todays_events():
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≥–µ–Ω–µ—Ä—É—î lesson events –Ω–∞ —Å—å–æ–≥–æ–¥–Ω—ñ."""
    async with AsyncSessionLocal() as db:
        manager = LessonEventManager(db)
        return await manager.auto_generate_daily_events()

async def reset_event_to_planned(lesson_event_id: int):
    """–°–∫–∏–¥–∞—î lesson event —É —Å—Ç–∞—Ç—É—Å PLANNED."""
    async with AsyncSessionLocal() as db:
        manager = LessonEventManager(db)
        return await manager.reset_lesson_event_to_planned(lesson_event_id)
