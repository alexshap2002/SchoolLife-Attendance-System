"""–®–≤–∏–¥–∫–∞ –≤—ñ–¥–º—ñ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ —á–µ—Ä–µ–∑ Reply Keyboard."""

import logging
from typing import Dict, List, Optional
from datetime import datetime, timezone

from aiogram import Router, F, Bot
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from sqlalchemy import select, update
from sqlalchemy.ext.asyncio import AsyncSession

from app.core.database import AsyncSessionLocal
from app.models import Teacher, LessonEvent, Student, ScheduleEnrollment, Attendance
from app.models.lesson_event import LessonEventStatus
from app.services.attendance_service import AttendanceService

router = Router()
logger = logging.getLogger(__name__)

# FSM States –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ
class AttendanceFlow(StatesGroup):
    marking_attendance = State()

# –í—Ä–µ–º–µ–Ω–Ω–µ —Å—Ö–æ–≤–∏—â–µ —Å–µ—Å—ñ–π (–≤ production –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π Redis)
attendance_sessions: Dict[int, Dict] = {}

def create_attendance_keyboard():
    """–°—Ç–≤–æ—Ä—é—î –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –¥–ª—è —à–≤–∏–¥–∫–æ—ó –≤—ñ–¥–º—ñ—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [
                KeyboardButton(text="‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—ñ–π"),
                KeyboardButton(text="‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π")
            ],
            [
                KeyboardButton(text="üìã –ó–∞–≤–µ—Ä—à–∏—Ç–∏")
            ]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

async def start_quick_attendance(chat_id: int, lesson_event_id: int, bot: Bot):
    """–†–æ–∑–ø–æ—á–∏–Ω–∞—î —à–≤–∏–¥–∫—É –≤—ñ–¥–º—ñ—Ç–∫—É —á–µ—Ä–µ–∑ Reply Keyboard."""
    
    try:
        async with AsyncSessionLocal() as db:
            # –û—Ç—Ä–∏–º—É—î–º–æ lesson event —Ç–∞ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            result = await db.execute(
                select(LessonEvent).where(LessonEvent.id == lesson_event_id)
            )
            lesson_event = result.scalar_one_or_none()
            
            if not lesson_event:
                await bot.send_message(chat_id, "‚ùå –ó–∞–Ω—è—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤
            students_result = await db.execute(
                select(Student)
                .join(ScheduleEnrollment, Student.id == ScheduleEnrollment.student_id)
                .where(ScheduleEnrollment.schedule_id == lesson_event.schedule_id)
                .order_by(Student.first_name, Student.last_name)
            )
            students = students_result.scalars().all()
            
            if not students:
                await bot.send_message(chat_id, "‚ùå –°—Ç—É–¥–µ–Ω—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ –¥–ª—è —Ü—å–æ–≥–æ –∑–∞–Ω—è—Ç—Ç—è")
                return
            
            # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–µ—Ñ–æ–ª—Ç–Ω—ñ –∑–∞–ø–∏—Å–∏ –≤—ñ–¥–≤—ñ–¥—É–≤–∞–Ω–Ω—è —è–∫—â–æ —ó—Ö –Ω–µ–º–∞—î
            attendance_service = AttendanceService(db)
            await attendance_service.create_default_attendance(lesson_event_id)
            
            # –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑—É—î–º–æ —Å–µ—Å—ñ—é
            attendance_sessions[chat_id] = {
                'lesson_event_id': lesson_event_id,
                'students': [{'id': s.id, 'name': f"{s.first_name} {s.last_name}", 'age': s.age} for s in students],
                'current_index': 0,
                'marked_count': 0,
                'total_count': len(students)
            }
            
            # –ü–æ–∫–∞–∑—É—î–º–æ –ø–µ—Ä—à–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            await show_current_student(chat_id, bot)
            
    except Exception as e:
        logger.error(f"Error starting quick attendance: {e}")
        await bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

async def show_current_student(chat_id: int, bot: Bot):
    """–ü–æ–∫–∞–∑—É—î –ø–æ—Ç–æ—á–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞ –¥–ª—è –≤—ñ–¥–º—ñ—Ç–∫–∏."""
    session = attendance_sessions.get(chat_id)
    if not session:
        await bot.send_message(chat_id, "‚ùå –°–µ—Å—ñ—è –≤—Ç—Ä–∞—á–µ–Ω–∞. –°–ø—Ä–æ–±—É–π—Ç–µ –ø–æ—á–∞—Ç–∏ –∑–Ω–æ–≤—É.")
        return
    
    current_index = session['current_index']
    students = session['students']
    
    if current_index >= len(students):
        await finish_attendance(chat_id, bot)
        return
    
    student = students[current_index]
    progress = f"{current_index + 1}/{len(students)}"
    
    text = f"""
üìö **–í—ñ–¥–º—ñ—Ç–∫–∞ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ**

üë§ **{student['name']}** ({student['age']} —Ä–æ–∫—ñ–≤)

üìä –ü—Ä–æ–≥—Ä–µ—Å: {progress}
‚úÖ –í—ñ–¥–º—ñ—á–µ–Ω–æ: {session['marked_count']}

–£—á–µ–Ω—å –ø—Ä–∏—Å—É—Ç–Ω—ñ–π —á–∏ –≤—ñ–¥—Å—É—Ç–Ω—ñ–π?
"""
    
    keyboard = create_attendance_keyboard()
    
    await bot.send_message(
        chat_id=chat_id,
        text=text,
        reply_markup=keyboard,
        parse_mode="Markdown"
    )

@router.message(F.text.in_(["‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—ñ–π", "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π"]))
async def handle_attendance_button(message: Message):
    """–û–±—Ä–æ–±–ª—è—î –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ –≤—ñ–¥–º—ñ—Ç–∫–∏."""
    chat_id = message.chat.id
    session = attendance_sessions.get(chat_id)
    
    if not session:
        await message.answer("‚ùå –°–µ—Å—ñ—è –≤—ñ–¥–º—ñ—Ç–∫–∏ –Ω–µ –∞–∫—Ç–∏–≤–Ω–∞.")
        return
    
    try:
        async with AsyncSessionLocal() as db:
            current_student = session['students'][session['current_index']]
            lesson_event_id = session['lesson_event_id']
            
            # –û–±—Ä–æ–±–ª—è—î–º–æ –≤–∏–±—ñ—Ä
            if message.text == "‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—ñ–π":
                status = "PRESENT"
                response = "‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—ñ–π"
            elif message.text == "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π":
                status = "ABSENT"
                response = "‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ–π"
            
            # –ó–∞–≤–∂–¥–∏ –∑–±—ñ–ª—å—à—É—î–º–æ –ª—ñ—á–∏–ª—å–Ω–∏–∫ –≤—ñ–¥–º—ñ—á–µ–Ω–∏—Ö
            session['marked_count'] += 1
            
            # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤—ñ–¥–º—ñ—Ç–∫—É –≤ –±–∞–∑—É (–∑–∞–≤–∂–¥–∏ –∑–±–µ—Ä—ñ–≥–∞—î–º–æ)
            await db.execute(
                update(Attendance)
                .where(
                    Attendance.lesson_event_id == lesson_event_id,
                    Attendance.student_id == current_student['id']
                )
                .values(
                    status=status,
                    marked_at=datetime.utcnow(),
                    marked_by=chat_id  # chat_id —è–∫ marked_by
                )
            )
            await db.commit()
            
            # –ü–æ–∫–∞–∑—É—î–º–æ —à–≤–∏–¥–∫–∏–π —Ñ—ñ–¥–±–µ–∫
            await message.answer(f"{response} - {current_student['name']}")
            
            # –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
            session['current_index'] += 1
            await show_current_student(chat_id, message.bot)
            
    except Exception as e:
        logger.error(f"Error handling attendance button: {e}")
        await message.answer(f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}")

@router.message(F.text == "üìã –ó–∞–≤–µ—Ä—à–∏—Ç–∏")
async def handle_finish_attendance(message: Message):
    """–ó–∞–≤–µ—Ä—à—É—î –≤—ñ–¥–º—ñ—Ç–∫—É –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ."""
    await finish_attendance(message.chat.id, message.bot)

async def finish_attendance(chat_id: int, bot: Bot):
    """–ó–∞–≤–µ—Ä—à—É—î –ø—Ä–æ—Ü–µ—Å –≤—ñ–¥–º—ñ—Ç–∫–∏ –ø—Ä–∏—Å—É—Ç–Ω–æ—Å—Ç—ñ."""
    session = attendance_sessions.get(chat_id)
    if not session:
        await bot.send_message(chat_id, "‚ùå –°–µ—Å—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.")
        return
    
    try:
        marked_count = session['marked_count']
        total_count = session['total_count']
        lesson_event_id = session['lesson_event_id']
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Å—Ç–∞—Ç—É—Å lesson event –Ω–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–π
        async with AsyncSessionLocal() as db:
            await db.execute(
                update(LessonEvent)
                .where(LessonEvent.id == lesson_event_id)
                .values(
                    status=LessonEventStatus.COMPLETED,
                    completed_at=datetime.utcnow()
                )
            )
            await db.commit()
        
        # –í–∏–¥–∞–ª—è—î–º–æ —Å–µ—Å—ñ—é
        del attendance_sessions[chat_id]
        
        # –ü—Ä–∏—Ö–æ–≤—É—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É
        await bot.send_message(
            chat_id=chat_id,
            text=f"""
‚úÖ **–í—ñ–¥–º—ñ—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!**

üìä **–ü—ñ–¥—Å—É–º–æ–∫:**
‚Ä¢ –í—Å—å–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤: {total_count}
‚Ä¢ –í—ñ–¥–º—ñ—á–µ–Ω–æ: {marked_count}

–í—Å—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏ –≤—ñ–¥–º—ñ—á–µ–Ω—ñ! üôè
""",
            reply_markup=ReplyKeyboardRemove(),
            parse_mode="Markdown"
        )
        
        logger.info(f"Attendance completed for lesson {lesson_event_id}: {marked_count}/{total_count} marked")
        
    except Exception as e:
        logger.error(f"Error finishing attendance: {e}")
        await bot.send_message(chat_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è: {e}")

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –∫–Ω–æ–ø–∫–æ—é "–ü–æ—á–∞—Ç–∏ –≤—ñ–¥–º—ñ—Ç–∫—É"
async def send_quick_attendance_invitation(chat_id: int, lesson_event_id: int, lesson_info: str, bot: Bot):
    """–í—ñ–¥–ø—Ä–∞–≤–ª—è—î –∑–∞–ø—Ä–æ—à–µ–Ω–Ω—è –ø–æ—á–∞—Ç–∏ —à–≤–∏–¥–∫—É –≤—ñ–¥–º—ñ—Ç–∫—É."""
    
    # –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ –Ω–æ–≤–∏–π —î–¥–∏–Ω–∏–π —Å–ø–∏—Å–æ–∫ –∑–∞–º—ñ—Å—Ç—å —Å—Ç–∞—Ä–æ—ó —Å–∏—Å—Ç–µ–º–∏
    from app.bot.unified_attendance import send_unified_attendance_list
    
    await send_unified_attendance_list(chat_id, lesson_event_id, lesson_info, bot)

# Callback handler –¥–ª—è –ø–æ—á–∞—Ç–∫—É –≤—ñ–¥–º—ñ—Ç–∫–∏
@router.callback_query(F.data.startswith("start_quick_attendance:"))
async def handle_start_quick_attendance(query):
    """–û–±—Ä–æ–±–ª—è—î –ø–æ—á–∞—Ç–æ–∫ —à–≤–∏–¥–∫–æ—ó –≤—ñ–¥–º—ñ—Ç–∫–∏."""
    lesson_event_id = int(query.data.split(":")[1])
    chat_id = query.message.chat.id
    
    await query.answer()
    await start_quick_attendance(chat_id, lesson_event_id, query.bot)
    
    # –í–∏–¥–∞–ª—è—î–º–æ –ø–æ—á–∞—Ç–∫–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
    await query.message.delete()
