import asyncio
import logging
from datetime import datetime, timezone, timedelta
from typing import List, Optional, Tuple
import httpx

from aiogram import Bot, Dispatcher, F
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, CallbackQuery
from aiogram.fsm.storage.memory import MemoryStorage
from sqlalchemy import select, update, text
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy.orm import selectinload

from app.core.database import AsyncSessionLocal
from app.core.settings import settings
from app.models import LessonEvent, Student, ScheduleEnrollment, Club, Attendance, Enrollment
from app.models.attendance import AttendanceStatus
from app.models.lesson_event import LessonEventStatus
from app.workers.automation_scheduler import start_automation_scheduler, stop_automation_scheduler

logger = logging.getLogger(__name__)


class TelegramBotDispatcher:
    def __init__(self):
        self.bot = Bot(token=settings.telegram_bot_token)
        self.dp = Dispatcher(storage=MemoryStorage())
        self.running = False
        self._setup_handlers()
    
    def _setup_handlers(self):
        """Setup callback handlers."""
        # –û–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è attendance callbacks
        @self.dp.callback_query(F.data.startswith("attendance_"))
        async def handle_attendance_callback(callback: CallbackQuery):
            await self._handle_attendance_callback(callback)
        
        # –£–Ω—ñ–≤–µ—Ä—Å–∞–ª—å–Ω–∏–π –æ–±—Ä–æ–±–Ω–∏–∫ –¥–ª—è –≤—Å—ñ—Ö —ñ–Ω—à–∏—Ö callbacks
        @self.dp.callback_query()
        async def handle_any_callback(callback: CallbackQuery):
            await self._handle_any_callback(callback)
        
    async def start_polling(self):
        """Start the dispatcher polling loop."""
        self.running = True
        logger.info("üöÄ Starting Telegram dispatcher polling...")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π
        try:
            await start_automation_scheduler()
            logger.info("‚úÖ Automation scheduler started")
        except Exception as e:
            logger.error(f"Failed to start automation scheduler: {e}")
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ aiogram polling –¥–ª—è callback'—ñ–≤
        aiogram_task = asyncio.create_task(self.dp.start_polling(self.bot))
        logger.info("‚úÖ Aiogram polling started for callbacks")
        
        # Polling loop –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
        try:
            while self.running:
                try:
                    await self._poll_and_send()
                    await asyncio.sleep(30)  # Poll every 30 seconds (–∑–Ω–∏–∂—É—î–º–æ –Ω–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è –Ω–∞ –ë–î)
                except Exception as e:
                    logger.error(f"Error in polling loop: {e}")
                    await asyncio.sleep(60)  # Wait longer on error
        finally:
            # –ó—É–ø–∏–Ω—è—î–º–æ aiogram polling
            aiogram_task.cancel()
            try:
                await aiogram_task
            except asyncio.CancelledError:
                pass
    
    async def stop_polling(self):
        """Stop the dispatcher."""
        self.running = False
        
        # –ó—É–ø–∏–Ω—è—î–º–æ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π
        try:
            await stop_automation_scheduler()
            logger.info("‚úÖ Automation scheduler stopped")
        except Exception as e:
            logger.error(f"Failed to stop automation scheduler: {e}")
        
        await self.bot.session.close()
        logger.info("üõë Telegram dispatcher stopped")
    
    async def _poll_and_send(self):
        """Poll for due lesson events and send notifications."""
        try:
            async with AsyncSessionLocal() as db:
                # Get events that need to be sent
                current_time = datetime.now(timezone.utc)
                
                result = await db.execute(
                    select(LessonEvent)
                    .options(
                        selectinload(LessonEvent.club),
                        selectinload(LessonEvent.teacher)
                    )
                    .where(
                        LessonEvent.status == LessonEventStatus.PLANNED,
                        LessonEvent.notify_at <= current_time,
                        LessonEvent.sent_at.is_(None)
                    )
                    .order_by(LessonEvent.notify_at.asc())  # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–∞–π—Å—Ç–∞—Ä—ñ—à—ñ –ø–æ–¥—ñ—ó —Å–ø–æ—á–∞—Ç–∫—É
                    .with_for_update(skip_locked=True)
                    .limit(30)  # –ó–±—ñ–ª—å—à–µ–Ω–æ –∑ 10 –¥–æ 30 –¥–ª—è —à–≤–∏–¥—à–æ—ó –æ–±—Ä–æ–±–∫–∏ —á–µ—Ä–≥–∏
                )
                
                events = result.scalars().all()
                
                for event in events:
                    await self._send_attendance_notification(event, db)
                    
        except Exception as e:
            logger.error(f"Error in poll_and_send: {e}")
    
    async def _send_attendance_notification(self, event: LessonEvent, db: AsyncSession):
        """Send attendance notification for a lesson event."""
        try:
            if not event.teacher_chat_id:
                logger.error(f"No teacher chat_id for event {event.id}")
                return
            
            text, reply_markup = await self.build_attendance_message(event, db)
            
            if reply_markup:
                await self.bot.send_message(
                    chat_id=event.teacher_chat_id,
                    text=text,
                    reply_markup=reply_markup,
                    parse_mode="HTML"
                )
                
                # Mark as sent
                await db.execute(
                    update(LessonEvent)
                    .where(LessonEvent.id == event.id)
                    .values(
                        sent_at=datetime.now(timezone.utc),
                        status=LessonEventStatus.SENT
                    )
                )
                await db.commit()
                
                logger.info(f"‚úÖ Sent notification for lesson_event {event.id}")
            else:
                # –í–ê–ñ–õ–ò–í–ê –í–ê–õ–Ü–î–ê–¶–Ü–Ø: —è–∫—â–æ –Ω–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ - –ø–µ—Ä–µ–≤–æ–¥–∏–º–æ –ø–æ–¥—ñ—é –≤ SKIPPED
                logger.warning(f"‚ö†Ô∏è No students found for event {event.id}, marking as SKIPPED")
                await db.execute(
                    update(LessonEvent)
                    .where(LessonEvent.id == event.id)
                    .values(
                        status=LessonEventStatus.SKIPPED,
                        last_error="No students in schedule"
                    )
                )
                await db.commit()
                
        except Exception as e:
            logger.error(f"Error sending notification for event {event.id}: {e}")
            await db.rollback()
    
    async def build_attendance_message(self, event: LessonEvent, db: AsyncSession) -> Tuple[str, Optional[InlineKeyboardMarkup]]:
        """Build attendance message –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º —ñ—Å–Ω—É—é—á–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤."""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏ attendance
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ ScheduleEnrollment (–∑–∞–ø–∏—Å –Ω–∞ –≥—Ä—É–ø—É)
            students_result = await db.execute(
                select(
                    Student.id,
                    Student.first_name,
                    Student.last_name,
                    Attendance.status
                )
                .join(ScheduleEnrollment, ScheduleEnrollment.student_id == Student.id)
                .outerjoin(
                    Attendance,
                    (Attendance.lesson_event_id == event.id) &
                    (Attendance.student_id == Student.id)
                )
                .where(ScheduleEnrollment.schedule_id == event.schedule_id)
                .order_by(Student.id)
            )
            students = students_result.fetchall()
            
            if not students:
                return "‚ùå –ù–µ–º–∞—î —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —É –≥—Ä—É–ø—ñ", None
            
            club_name = event.club.name if event.club else "–ó–∞–Ω—è—Ç—Ç—è"
            date_str = event.date.strftime("%d.%m.%Y")
            
            text = f"üìö **{club_name} - {date_str}**"
            text = text + "\n\nüëÜ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É"
            
            # –ö–Ω–æ–ø–∫–∏ –¥–ª—è —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–æ—Ç–æ—á–Ω–∏—Ö —Å—Ç–∞—Ç—É—Å—ñ–≤
            keyboard = []
            for row in students:
                student_name = f"{row.first_name} {row.last_name}"
                
                # –í–∏–∑–Ω–∞—á–∞—î–º–æ –ø–æ—Ç–æ—á–Ω–∏–π —Å—Ç–∞—Ç—É—Å —ñ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω—É –∫–Ω–æ–ø–∫—É
                if row.status == AttendanceStatus.ABSENT:
                    button_text = f"‚ùå {student_name}"
                    callback_data = f"attendance_toggle_{event.id}_{row.id}_absent"
                else:
                    # –ó–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –∞–±–æ PRESENT
                    button_text = f"‚úÖ {student_name}"
                    callback_data = f"attendance_toggle_{event.id}_{row.id}_present"
                
                keyboard.append([
                    InlineKeyboardButton(
                        text=button_text,
                        callback_data=callback_data
                    )
                ])
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            keyboard.append([
                InlineKeyboardButton(
                    text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–º—ñ—Ç–∫—É",
                    callback_data=f"attendance_finish_{event.id}"
                )
            ])
            
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            return text, reply_markup
            
        except Exception as e:
            logger.error(f"Error building attendance message: {e}")
            return f"‚ùå –ü–æ–º–∏–ª–∫–∞: {e}", None
    
    async def _handle_attendance_callback(self, callback: CallbackQuery):
        """Handle attendance callback from dispatcher."""
        chat_id = callback.message.chat.id
        user_info = f"@{callback.from_user.username}" if callback.from_user.username else f"ID:{callback.from_user.id}"
        logger.info(f"üî•üî•üî• DISPATCHER CALLBACK: {callback.data} | User: {user_info} | Chat: {chat_id}")
        
        try:
            data_parts = callback.data.split("_")
            
            if len(data_parts) == 3 and data_parts[1] == "finish":
                lesson_event_id = int(data_parts[2])
                logger.info(f"üèÅ FINISH ATTENDANCE: lesson_event_id={lesson_event_id}")
                await self._finish_attendance(callback, lesson_event_id)
                return
            
            if len(data_parts) == 5 and data_parts[1] == "toggle":
                _, _, lesson_event_id_str, student_id_str, current_status = data_parts
                lesson_event_id = int(lesson_event_id_str)
                student_id = int(student_id_str)
                
                logger.info(f"üîÑ TOGGLE ATTENDANCE: lesson={lesson_event_id}, student={student_id}, current={current_status}")
                
                async with AsyncSessionLocal() as db:
                    new_status = "absent" if current_status == "present" else "present"
                    logger.info(f"üìù NEW STATUS: {current_status} ‚Üí {new_status}")
                    
                    # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ attendance
                    save_result = await self._save_attendance_status(db, lesson_event_id, student_id, new_status, chat_id)
                    logger.info(f"üíæ SAVE RESULT: {save_result}")
                    
                    # –û–Ω–æ–≤–ª—é—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                    logger.info(f"üîÑ UPDATING MESSAGE...")
                    await self._update_attendance_message(callback, lesson_event_id, db)
                    logger.info(f"‚úÖ MESSAGE UPDATED")
                    
                    await callback.answer(f"‚úÖ {new_status.title()}")
                return
            
            await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç")
            
        except Exception as e:
            logger.error(f"Error in attendance callback: {e}")
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞")
    
    async def _handle_any_callback(self, callback: CallbackQuery):
        """Handle any other callback for debugging."""
        logger.info(f"üîç OTHER CALLBACK: {callback.data} | User: @{callback.from_user.username}")
        await callback.answer("‚úÖ –û—Ç—Ä–∏–º–∞–Ω–æ")
    
    async def _save_attendance_status(self, db: AsyncSession, lesson_event_id: int, student_id: int, status: str, marked_by: int):
        """Save attendance status to database and sync with API."""
        try:
            from sqlalchemy.dialects.postgresql import insert
            
            attendance_status = AttendanceStatus.PRESENT if status == "present" else AttendanceStatus.ABSENT
            
            # 1. –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –≤ –ë–î (–ª–æ–∫–∞–ª—å–Ω–æ –≤ dispatcher)
            stmt = insert(Attendance).values(
                lesson_event_id=lesson_event_id,
                student_id=student_id,
                status=attendance_status,
                marked_by=marked_by,
                marked_at=datetime.now(timezone.utc)
            )
            
            stmt = stmt.on_conflict_do_update(
                constraint="attendance_lesson_student_unique",
                set_=dict(
                    status=stmt.excluded.status,
                    marked_by=stmt.excluded.marked_by,
                    marked_at=stmt.excluded.marked_at
                )
            )
            
            await db.execute(stmt)
            await db.commit()
            logger.info(f"‚úÖ Saved to DB: {attendance_status} for student {student_id}")
            
            # 2. –°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ –∑ –æ—Å–Ω–æ–≤–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é —á–µ—Ä–µ–∑ API
            api_result = await self._sync_attendance_with_api(lesson_event_id, student_id, status.upper(), marked_by)
            logger.info(f"üîÑ API sync result: {api_result}")
            
            return True
            
        except Exception as e:
            logger.error(f"‚ùå Error saving attendance: {e}")
            await db.rollback()
            return False
    
    async def _sync_attendance_with_api(self, lesson_event_id: int, student_id: int, status: str, marked_by: int):
        """–°–∏–Ω—Ö—Ä–æ–Ω—ñ–∑—É—î–º–æ attendance –∑ –æ—Å–Ω–æ–≤–Ω–æ—é —Å–∏—Å—Ç–µ–º–æ—é —á–µ—Ä–µ–∑ API."""
        try:
            async with httpx.AsyncClient() as client:
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ API endpoint –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è/–æ–Ω–æ–≤–ª–µ–Ω–Ω—è attendance
                api_data = {
                    "lesson_event_id": lesson_event_id,
                    "student_id": student_id,
                    "status": status,  # "PRESENT" –∞–±–æ "ABSENT"
                    "marked_by": marked_by,
                    "update_if_exists": True  # –î–æ–∑–≤–æ–ª—è—î–º–æ –æ–Ω–æ–≤–ª–µ–Ω–Ω—è
                }
                
                # –í–∏–∫–ª–∏–∫–∞—î–º–æ webapp API (–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –¥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞)
                response = await client.post(
                    "http://school-webapp:8000/api/attendance",
                    json=api_data,
                    timeout=10.0
                )
                
                if response.status_code in [200, 201]:
                    logger.info(f"‚úÖ API sync successful: {response.status_code}")
                    return True
                else:
                    logger.warning(f"‚ö†Ô∏è API sync failed: {response.status_code} - {response.text}")
                    return False
                    
        except Exception as e:
            logger.error(f"‚ùå Error syncing with API: {e}")
            return False
    
    async def _update_attendance_message(self, callback: CallbackQuery, lesson_event_id: int, db: AsyncSession):
        """Update attendance message with new statuses."""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ lesson_event –∑ club
            lesson_result = await db.execute(
                select(LessonEvent)
                .options(selectinload(LessonEvent.club))
                .where(LessonEvent.id == lesson_event_id)
            )
            lesson_event = lesson_result.scalar_one_or_none()
            
            if not lesson_event:
                await callback.answer("‚ùå –ó–∞–Ω—è—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
                return
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ –∑—ñ —Å—Ç–∞—Ç—É—Å–∞–º–∏
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ ScheduleEnrollment (–∑–∞–ø–∏—Å –Ω–∞ –≥—Ä—É–ø—É)
            students_with_attendance = await db.execute(
                select(
                    Student.id,
                    Student.first_name,
                    Student.last_name,
                    Attendance.status
                )
                .join(ScheduleEnrollment, ScheduleEnrollment.student_id == Student.id)
                .outerjoin(
                    Attendance,
                    (Attendance.lesson_event_id == lesson_event_id) &
                    (Attendance.student_id == Student.id)
                )
                .where(ScheduleEnrollment.schedule_id == lesson_event.schedule_id)
                .order_by(Student.id)
            )
            
            # –ë—É–¥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            club_name = lesson_event.club.name if lesson_event.club else "–ó–∞–Ω—è—Ç—Ç—è"
            date_str = lesson_event.date.strftime("%d.%m.%Y")
            
            text = f"üìö **{club_name} - {date_str}**"
            text = text + "\n\nüëÜ –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∑–º—ñ–Ω–∏ —Å—Ç–∞—Ç—É—Å—É"
            
            keyboard = []
            for row in students_with_attendance:
                student_name = f"{row.first_name} {row.last_name}"
                
                # –õ–æ–≥—ñ–∫–∞: —è–∫—â–æ —Å—Ç—É–¥–µ–Ω—Ç –í–Ü–î–°–£–¢–ù–Ü–ô - –ø–æ–∫–∞–∑–∞—Ç–∏ ‚ùå, —ñ–Ω–∞–∫—à–µ ‚úÖ
                if row.status == AttendanceStatus.ABSENT:
                    button_text = f"‚ùå {student_name}"
                    callback_data = f"attendance_toggle_{lesson_event_id}_{row.id}_absent"
                else:
                    # row.status == AttendanceStatus.PRESENT –∞–±–æ None (–∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º –ø—Ä–∏—Å—É—Ç–Ω—ñ–π)
                    button_text = f"‚úÖ {student_name}"
                    callback_data = f"attendance_toggle_{lesson_event_id}_{row.id}_present"
                
                keyboard.append([InlineKeyboardButton(text=button_text, callback_data=callback_data)])
            
            # –ö–Ω–æ–ø–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è
            keyboard.append([
                InlineKeyboardButton(
                    text="üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç–∏ –≤—ñ–¥–º—ñ—Ç–∫—É",
                    callback_data=f"attendance_finish_{lesson_event_id}"
                )
            ])
            
            reply_markup = InlineKeyboardMarkup(inline_keyboard=keyboard)
            
            logger.info(f"üì± Updating message with {len(keyboard)} buttons")
            await callback.message.edit_text(
                text=text,
                reply_markup=reply_markup,
                parse_mode="Markdown"
            )
            
        except Exception as e:
            logger.error(f"Error updating message: {e}")
    
    async def _finish_attendance(self, callback: CallbackQuery, lesson_event_id: int):
        """Finish attendance marking - —Å—Ç–≤–æ—Ä—é—î conducted lesson —ñ payroll."""
        try:
            async with AsyncSessionLocal() as db:
                # 1. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ AttendanceService –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è (—Å—Ç–≤–æ—Ä—é—î payroll)
                from app.services.attendance_service import AttendanceService
                attendance_service = AttendanceService(db)
                chat_id = callback.from_user.id  # –ü–µ—Ä–µ–¥–∞—î–º–æ —è–∫ int, –Ω–µ str
                
                await attendance_service.save_attendance(lesson_event_id, chat_id)
                logger.info(f"‚úÖ Completed lesson_event {lesson_event_id} with payroll")
                
                # 2. –°—Ç–≤–æ—Ä—é—î–º–æ ConductedLesson
                from app.services.conducted_lesson_service import ConductedLessonService
                conducted_service = ConductedLessonService(db)
                conducted_lesson = await conducted_service.create_from_lesson_event(lesson_event_id)
                
                if conducted_lesson:
                    logger.info(f"‚úÖ Created ConductedLesson {conducted_lesson.id}")
                
                # 3. –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –¥–ª—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
                result_message = await self._build_completion_message(db, lesson_event_id)
                
                await callback.message.edit_text(
                    result_message,
                    reply_markup=None,
                    parse_mode="Markdown"
                )
                await callback.answer("‚úÖ –í—ñ–¥–º—ñ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
                
        except Exception as e:
            logger.error(f"Error finishing attendance: {e}")
            await callback.message.edit_text(
                "‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≤—ñ–¥–º—ñ—Ç–∫–∏.\n–°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.",
                reply_markup=None
            )
            await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è")
    
    async def _build_completion_message(self, db: AsyncSession, lesson_event_id: int) -> str:
        """–ë—É–¥—É—î —Ñ—ñ–Ω–∞–ª—å–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏."""
        try:
            # –û—Ç—Ä–∏–º—É—î–º–æ lesson_event –∑ club
            lesson_result = await db.execute(
                select(LessonEvent)
                .options(selectinload(LessonEvent.club))
                .where(LessonEvent.id == lesson_event_id)
            )
            lesson_event = lesson_result.scalar_one_or_none()
            
            if not lesson_event:
                return "‚ùå –ü–æ–º–∏–ª–∫–∞: –∑–∞–Ω—è—Ç—Ç—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ"
            
            # –û—Ç—Ä–∏–º—É—î–º–æ —Å—Ç—É–¥–µ–Ω—Ç—ñ–≤ —á–µ—Ä–µ–∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ ScheduleEnrollment (–∑–∞–ø–∏—Å –Ω–∞ –≥—Ä—É–ø—É)
            students_result = await db.execute(
                select(
                    Student.id,
                    Student.first_name,
                    Student.last_name,
                    Attendance.status
                )
                .join(ScheduleEnrollment, ScheduleEnrollment.student_id == Student.id)
                .outerjoin(
                    Attendance,
                    (Attendance.lesson_event_id == lesson_event_id) &
                    (Attendance.student_id == Student.id)
                )
                .where(ScheduleEnrollment.schedule_id == lesson_event.schedule_id)
                .order_by(Student.first_name)
            )
            students_data = students_result.fetchall()
            
            # –†–∞—Ö—É—î–º–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑ –ü–†–ê–í–ò–õ–¨–ù–û–Æ –ª–æ–≥—ñ–∫–æ—é
            present_students = []
            absent_students = []
            
            for student_id, first_name, last_name, attendance_status in students_data:
                full_name = f"{first_name} {last_name}"
                
                # –õ–û–ì–Ü–ö–ê: —è–∫—â–æ –Ω–µ–º–∞—î –∑–∞–ø–∏—Å—É attendance ‚Üí —Å—Ç—É–¥–µ–Ω—Ç –ü–†–ò–°–£–¢–ù–Ü–ô –∑–∞ –∑–∞–º–æ–≤—á—É–≤–∞–Ω–Ω—è–º
                if attendance_status is None or attendance_status == AttendanceStatus.PRESENT:
                    present_students.append(full_name)
                else:
                    absent_students.append(full_name)
            
            total = len(students_data)
            present_count = len(present_students)
            absent_count = len(absent_students)
            
            # –ë—É–¥—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
            club_name = lesson_event.club.name if lesson_event.club else "–ó–∞–Ω—è—Ç—Ç—è"
            date_str = lesson_event.date.strftime("%d.%m.%Y")
            
            message = f"‚úÖ **–í—ñ–¥–º—ñ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!**\n\n"
            message += f"üìö **{club_name} - {date_str}**\n\n"
            message += f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç–∏:**\n"
            message += f"‚Ä¢ ‚úÖ –ü—Ä–∏—Å—É—Ç–Ω—ñ: {present_count}\n"
            message += f"‚Ä¢ ‚ùå –í—ñ–¥—Å—É—Ç–Ω—ñ: {absent_count}\n"
            message += f"‚Ä¢ üë• –í—Å—å–æ–≥–æ: {total}\n"
            
            if absent_students:
                message += f"\n‚ùå **–í—ñ–¥—Å—É—Ç–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏:**\n"
                for student in absent_students:
                    message += f"‚Ä¢ {student}\n"
            
            if present_students:
                message += f"\n‚úÖ **–ü—Ä–∏—Å—É—Ç–Ω—ñ —Å—Ç—É–¥–µ–Ω—Ç–∏:**\n"
                for student in present_students:
                    message += f"‚Ä¢ {student}\n"
            
            return message
            
        except Exception as e:
            logger.error(f"Error building completion message: {e}")
            return "‚úÖ –í—ñ–¥–º—ñ—Ç–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n–î—è–∫—É—î–º–æ –∑–∞ —Ä–æ–±–æ—Ç—É."


async def main():
    """Main dispatcher function."""
    dispatcher = TelegramBotDispatcher()
    
    try:
        await dispatcher.start_polling()
    except KeyboardInterrupt:
        logger.info("Received stop signal")
    finally:
        await dispatcher.stop_polling()


if __name__ == "__main__":
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
    )
    asyncio.run(main())
