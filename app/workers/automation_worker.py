"""
Worker –¥–ª—è –∑–∞–ø—É—Å–∫—É –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞.
"""

import asyncio
import logging
from datetime import datetime
import schedule
import time

from app.services.automation_service import run_automations

logger = logging.getLogger(__name__)


class AutomationWorker:
    """Worker –¥–ª—è –≤–∏–∫–æ–Ω–∞–Ω–Ω—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π."""
    
    def __init__(self):
        self.running = False
    
    def setup_scheduler(self):
        """–ù–∞–ª–∞—à—Ç–æ–≤—É—î scheduler –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ–π."""
        
        # –ó–∞–ø—É—Å–∫–∞—î–º–æ –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –∫–æ–∂–Ω—É —Ö–≤–∏–ª–∏–Ω—É
        # (–≤–æ–Ω–∏ —Å–∞–º—ñ –≤–∏–∑–Ω–∞—á–∞—Ç—å —á–∏ –ø–æ—Ç—Ä—ñ–±–Ω–æ –≤–∏–∫–æ–Ω—É–≤–∞—Ç–∏—Å—å –∑–∞—Ä–∞–∑)
        schedule.every().minute.do(self.run_automation_job)
        
        logger.info("ü§ñ Automation scheduler configured")
    
    def run_automation_job(self):
        """–ó–∞–ø—É—Å–∫–∞—î –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü—ñ—ó –≤ async –∫–æ–Ω—Ç–µ–∫—Å—Ç—ñ."""
        try:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(run_automations())
            loop.close()
        except Exception as e:
            logger.error(f"‚ùå Error in automation job: {e}")
    
    def start(self):
        """–ó–∞–ø—É—Å–∫–∞—î worker."""
        logger.info("üöÄ Starting Automation Worker...")
        
        self.setup_scheduler()
        self.running = True
        
        logger.info("‚úÖ Automation Worker started. Running automations every minute.")
        
        while self.running:
            try:
                schedule.run_pending()
                time.sleep(1)
            except KeyboardInterrupt:
                logger.info("üõë Keyboard interrupt received")
                self.stop()
            except Exception as e:
                logger.error(f"‚ùå Error in automation worker loop: {e}")
                time.sleep(5)  # Wait before retrying
    
    def stop(self):
        """–ó—É–ø–∏–Ω—è—î worker."""
        logger.info("üõë Stopping Automation Worker...")
        self.running = False
        schedule.clear()
        logger.info("‚úÖ Automation Worker stopped")


def main():
    """–ì–æ–ª–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–ø—É—Å–∫—É worker."""
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
    logging.basicConfig(
        level=logging.INFO,
        format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
        handlers=[
            logging.StreamHandler(),
            logging.FileHandler('/app/logs/automation_worker.log')
        ]
    )
    
    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä—ñ—é –¥–ª—è –ª–æ–≥—ñ–≤
    import os
    os.makedirs('/app/logs', exist_ok=True)
    
    logger.info("ü§ñ Starting Automation Worker...")
    
    worker = AutomationWorker()
    
    try:
        worker.start()
    except Exception as e:
        logger.error(f"‚ùå Fatal error in automation worker: {e}")
    finally:
        worker.stop()


if __name__ == "__main__":
    main()
